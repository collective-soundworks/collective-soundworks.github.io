import{_ as a,o as n,c as e,O as l}from"./chunks/framework.b2c12034.js";const o="/assets/soundworks-create-min.2e2aae2b.gif",t="/assets/fancy-black-screen.1259df19.png",p="/assets/browser-console.48f3525a.png",c="/assets/browser-console-2.a285274f.png",r="/assets/emulated-clients.2df378a3.png",f=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/getting-started.md","filePath":"tutorials/getting-started.md"}'),i={name:"tutorials/getting-started.md"};function F(d,s,y,h,u,g){return n(),e("div",null,s[0]||(s[0]=[l('<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><p>In this tutorial, we will learn how to setup a project and develop a simple <em>soundworks</em> application where any connected user will be able to trigger a flash on the screen of all connected clients.</p><p>The tutorial requires basic knowledge of <em>JavaScript</em>, <em>Node.js</em> and of the command-line. If you are just starting with <em>JavaScript</em> development, please first set up a working environment following the instructions <a href="https://ircam-ismm.github.io/webaudio-tutorials/first-steps/setting-up-environment.html" target="_blank" rel="noreferrer">here</a> and come back when done.</p><blockquote><p>The final source code of this tutorial can be found <a href="https://github.com/collective-soundworks/tutorials/tree/main/getting-started" target="_blank" rel="noreferrer">here</a></p></blockquote><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h3><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer">Node.js 16+</a></li><li>A modern browser (e.g. Chrome, Firefox)</li></ul><h2 id="step-1-setting-things-up" tabindex="-1">Step 1 - Setting things up <a class="header-anchor" href="#step-1-setting-things-up" aria-label="Permalink to &quot;Step 1 - Setting things up&quot;">​</a></h2><p>The best and most simple way to create a new <em>soundworks</em> application is to use our dedicated command line tools:</p><p><img src="'+o+`" alt="soundworks/create"></p><p>So first thing first, open a Terminal, go to some directory and execute the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">path/to/working/dir</span></span>
<span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">@soundworks/create@latest</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you run the command for the first time (which is quite likely), the <code>npx</code> command will tell you that it needs to install the <code>@soundworks/create</code> package, just press <code>Enter</code> to accept and continue.</p></div><p>The wizard will startup and ask you for the name of the directory in which you want to create the application: just write <code>getting-started</code> and press <code>Enter</code>. The wizard will automatically create the directory, copy a bunch of files and install the required dependencies as illustrated in the screenshot below.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note that the screenshots in this guide may differ slightly from what you actually see in your console, as the CLI tool might have evolved a bit since the screenshots have been made.</p></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#86B42B;">~/tmp</span><span style="color:#F8F8F2;"> $ npx @soundworks/create@latest</span></span>
<span class="line"><span style="color:#666666;">[@soundworks/create#v5.0.3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B3B42B;">&gt; welcome to soundworks</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">- documentation: </span><span style="color:#56ADBC;">https://soundworks.dev</span></span>
<span class="line"><span style="color:#F8F8F2;">- issues: </span><span style="color:#56ADBC;">https://github.com/collective-soundworks/soundworks/issues</span></span>
<span class="line"></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Where should we create your project? (leave blank to use current directory)</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> getting-started</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">- Scaffolding application in &quot;~/tmp/getting-started&quot; directory</span></span>
<span class="line"><span style="color:#F8F8F2;">- Installing dependencies</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you run the command for the first time, you will prompt to install the <code>@soundworks/create</code> package from the internet, just press <code>Enter</code> to confirm</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#86B42B;">~/tmp</span><span style="color:#F8F8F2;"> $ npx @soundworks/create@latest</span></span>
<span class="line"><span style="color:#F8F8F2;">Need to install the following packages:</span></span>
<span class="line"><span style="color:#F8F8F2;">@soundworks/create@5.0.3</span></span>
<span class="line"><span style="color:#F8F8F2;">Ok to proceed? (y) </span></span></code></pre></div></div><p>Once the installation is done, the <code>@soundworks/create</code> wizard will propose you to install some <em>soundworks</em> plugins and some curated libraries. For now, just press <code>Enter</code> to skip this steps.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#666666;">[@soundworks/wizard#v5.0.3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56ADBC;"># Install plugins</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Select the plugins you would like to install/uninstall</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#B3B42B;">+ nothing to do, aborting...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56ADBC;"># Install libraries</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Select the libraries you would like to install/uninstall</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#B3B42B;">+ nothing to do, aborting...</span></span></code></pre></div><p>After that step, the wizard will propose you to create a client of your application. Let&#39;s call it <code>player</code> and press <code>Enter</code> as shown below.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#56ADBC;"># Install plugins</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Select the plugins you would like to install/uninstall</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#B3B42B;">+ nothing to do, aborting...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56ADBC;"># Install libraries</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Select the libraries you would like to install/uninstall</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#B3B42B;">+ nothing to do, aborting...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56ADBC;"># Create client</span></span>
<span class="line"><span style="color:#56ADBC;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Name of your new client (lowercase, no-space):</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> player</span></span></code></pre></div><p>The wizard will then ask a few questions to configure your client, again just press <code>Enter</code> to select the default values, i.e. select the <code>browser</code> runtime</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#56ADBC;"># Create client</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Name of your new client (lowercase, no-space):</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> player</span></span>
<span class="line"><span style="color:#56ADBC;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Which runtime for your client?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">- Use arrow-keys. Return to submit.</span></span>
<span class="line"><span style="color:#56ADBC;">❯</span><span style="color:#F8F8F2;">   </span><span style="color:#56ADBC;text-decoration:underline;">browser</span></span>
<span class="line"><span style="color:#F8F8F2;">    node</span></span></code></pre></div><p>and the <code>default</code> template:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#56ADBC;"># Create client</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Name of your new client (lowercase, no-space):</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> player</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Which runtime for your client?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> browser</span></span>
<span class="line"><span style="color:#56ADBC;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Which template would you like to use?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">- Use arrow-keys. Return to submit.</span></span>
<span class="line"><span style="color:#56ADBC;">❯</span><span style="color:#F8F8F2;">   </span><span style="color:#56ADBC;text-decoration:underline;">default</span></span>
<span class="line"><span style="color:#F8F8F2;">    controller</span></span></code></pre></div><p>Finally, the wizard will ask you to confirm your choices, press <code>Enter</code>.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#56ADBC;"># Create client</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Name of your new client (lowercase, no-space):</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> player</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Which runtime for your client?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> browser</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Which template would you like to use?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> default</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">- Creating client &quot;player&quot; in file &quot;src/clients/player.js&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">- name: </span><span style="color:#56ADBC;">player</span></span>
<span class="line"><span style="color:#F8F8F2;">- runtime: </span><span style="color:#56ADBC;">browser</span></span>
<span class="line"><span style="color:#F8F8F2;">- template: </span><span style="color:#56ADBC;">default</span></span>
<span class="line"><span style="color:#F8F8F2;">- default: </span><span style="color:#56ADBC;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56ADBC;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Confirm?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> no </span><span style="color:#666666;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#56ADBC;text-decoration:underline;">yes</span></span></code></pre></div><p>Once done, the wizard will propose you a bunch of possible thing to do, for now let&#39;s just <code>exit</code>:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#56ADBC;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">What do you want to do?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">- Use arrow-keys. Return to submit.</span></span>
<span class="line"><span style="color:#F8F8F2;">    create a new soundworks client</span></span>
<span class="line"><span style="color:#F8F8F2;">    install / uninstall soundworks plugins</span></span>
<span class="line"><span style="color:#F8F8F2;">    install / uninstall related libs</span></span>
<span class="line"><span style="color:#F8F8F2;">    find documentation about plugins and libs</span></span>
<span class="line"><span style="color:#F8F8F2;">    get config information about you application</span></span>
<span class="line"><span style="color:#F8F8F2;">    create a new environment config file</span></span>
<span class="line"><span style="color:#F8F8F2;">    eject the launcher and default init views</span></span>
<span class="line"><span style="color:#F8F8F2;">    check and update your dependencies</span></span>
<span class="line"><span style="color:#F8F8F2;">    upgrade config files from JSON to YAML</span></span>
<span class="line highlighted"><span style="color:#56ADBC;">❯</span><span style="color:#F8F8F2;">   </span><span style="color:#56ADBC;text-decoration:underline;">→ exit</span></span></code></pre></div><p>Congrats, your application is now ready to be launched!</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#86B42B;">+ Your project is ready!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">- next steps:</span></span>
<span class="line"><span style="color:#F8F8F2;">  1: </span><span style="color:#56ADBC;">cd getting-started</span></span>
<span class="line"><span style="color:#F8F8F2;">  2: </span><span style="color:#56ADBC;">git init &amp;&amp; git add -A &amp;&amp; git commit -m &quot;first commit&quot;</span><span style="color:#F8F8F2;"> (optional)</span></span>
<span class="line"><span style="color:#F8F8F2;">  3: </span><span style="color:#56ADBC;">npm run dev</span></span></code></pre></div><p>To make sure the application is correctly set up and installed, just follow the steps 1 and 3 proposed as next steps by the wizard:</p><ol><li>Go to the directory: <code>cd getting-started</code></li><li>Launch the project in development mode: <code>npm run dev</code></li></ol><p>After a few seconds, the server should be running:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#86B42B;">~/tmp</span><span style="color:#F8F8F2;"> $ cd getting-started/</span></span>
<span class="line"><span style="color:#86B42B;">~/tmp/getting-started</span><span style="color:#F8F8F2;"> $ npm run dev</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B3B42B;">[...some build logs...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">--------------------------------------------------------</span></span>
<span class="line"><span style="color:#F8F8F2;">- launching &quot;getting-started&quot; in &quot;default&quot; environment</span></span>
<span class="line"><span style="color:#F8F8F2;">- [pid: 38424]</span></span>
<span class="line"><span style="color:#F8F8F2;">--------------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56ADBC;">+ configured clients and routing</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">ROLE     | RUNTIME | PATH   | DEFAULT |  AUTH </span></span>
<span class="line"><span style="color:#F8F8F2;">&gt; player | </span><span style="color:#C4265E;">browser</span><span style="color:#F8F8F2;"> | /      |    x    |       </span></span>
<span class="line"></span>
<span class="line"><span style="color:#56ADBC;">+ starting registered plugins</span></span>
<span class="line"><span style="color:#56ADBC;">+ http server listening on</span></span>
<span class="line"><span style="color:#F8F8F2;">    http://127.0.0.1:</span><span style="color:#86B42B;">8000</span></span>
<span class="line"><span style="color:#F8F8F2;">    http://192.168.1.89:</span><span style="color:#86B42B;">8000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&gt; press &quot;</span><span style="color:#F8F8F2;font-weight:bold;">Ctrl + C</span><span style="color:#F8F8F2;">&quot; to exit</span></span>
<span class="line"><span style="color:#F8F8F2;">Sass is watching for changes. Press Ctrl-C to stop.</span></span></code></pre></div><p>Open you favorite browser (which shall probably not be Safari), go to <a href="http://127.0.0.1:8000" target="_blank" rel="noreferrer">http://127.0.0.1:8000</a>, and tada! You should see a rather pretty almost black screen:</p><p><img src="`+t+`" alt="fancy-black-screen"></p><p>Congrats! You just configured and ran your first soundworks application. Now, let&#39;s have a closer look to the code base.</p><h2 id="step-2-exploring-the-file-structure-of-the-application" tabindex="-1">Step 2 - Exploring the file structure of the application <a class="header-anchor" href="#step-2-exploring-the-file-structure-of-the-application" aria-label="Permalink to &quot;Step 2 - Exploring the file structure of the application&quot;">​</a></h2><p>Press <code>Ctrl + C</code> to stop the server and open the <code>getting-started</code> directory in your favorite text editor. You should see the following file structure:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">getting-started</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">.build</span><span style="color:#F8F8F2;">              </span><span style="color:#88846F;"># Directory where your application is built</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">config</span><span style="color:#F8F8F2;">              </span><span style="color:#88846F;"># Configuration files</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">application.yaml</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">└──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">env-default.yaml</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">node_modules</span><span style="color:#F8F8F2;">        </span><span style="color:#88846F;"># Directory where the dependencies are installed</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">public</span><span style="color:#F8F8F2;">              </span><span style="color:#88846F;"># Directory that is exposed by the server</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">src</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">clients</span><span style="color:#F8F8F2;">         </span><span style="color:#88846F;"># Directory where all clients are declared</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">└──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">player.js</span><span style="color:#F8F8F2;">    </span><span style="color:#88846F;"># Source code of the \`player\` client you just created</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">styles</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">└──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">server.js</span><span style="color:#F8F8F2;">       </span><span style="color:#88846F;"># Source code of the server</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">package.json</span><span style="color:#F8F8F2;">        </span><span style="color:#88846F;"># File that contains the declaration of your dependencies</span></span>
<span class="line"><span style="color:#A6E22E;">└──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">README.md</span><span style="color:#F8F8F2;">           </span><span style="color:#88846F;"># General infos about your application</span></span></code></pre></div><p>There are a few thing to note about all these files:</p><ul><li>The <code>node_modules</code> and <code>.build</code> directories should <strong><em>never</em></strong> be edited manually. They are respectively used by the <a href="https://docs.npmjs.com/about-npm" target="_blank" rel="noreferrer">Node Package Manager</a> (i.e. <code>npm</code>) to install dependencies of your application, and by the <em>soundworks</em> build tools to make some transformation on your source files.</li><li>The <code>src</code> directory, at contrary, contains all the source files of your application, this is where you will work most of the time.</li><li>The <code>public</code> directory is the directory that is exposed to the network by the server. This is the place where you should put your static assets such as images or sound files, so that clients connected to your application can download and use them.</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>It is <strong><em>very</em></strong> important to understand and to keep in mind that exposing a directory to the network means that <strong><em>all the files</em></strong> located in this directory will be accessible by <strong><em>any</em></strong> computer connected to the same network.</p><p><strong><em>So, DO NOT expose any sensitive or private information in this directory</em></strong>.</p><p>This is an important thing to keep in mind whenever you deal with servers and networks, it&#39;s not specific to <em>soundworks</em> applications.</p></div><p>Now that we have an overview of the file structure of a <em>soundworks</em> application, let&#39;s write some code!</p><h2 id="step-3-create-a-global-shared-state" tabindex="-1">Step 3 - Create a global shared state <a class="header-anchor" href="#step-3-create-a-global-shared-state" aria-label="Permalink to &quot;Step 3 - Create a global shared state&quot;">​</a></h2><p>First, go back to the Terminal and restart our server:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">run</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">dev</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>dev</code> command (quite wisely) starts the server in development mode. This means the application will be bundled and the server restarted each time a source file is saved (which is expected to be comfortable and time saving when developing an application).</p></div><p>Open the <code>src/server.js</code> file and add the following lines at the end of the file (i.e. after the <code>await server.start();</code> line):</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/server.js</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// and do your own stuff!</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globalSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  trigger: { type: </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">, event: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">};</span></span></code></pre></div><p>Here, we are just creating a plain old JavaScript object that follows the <em>soundworks</em> shared state class description syntax. This data structure declares a parameter named <code>trigger</code> that is configured to be a <code>boolean</code> event.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you are familiar with databases, you can think of these data structure as the schema of a table. If you are curious, the full API documentation for declaring shared state class descriptions can be found <a href="https://soundworks.dev/soundworks/global.html#SharedStateClassDescription" target="_blank" rel="noreferrer">here</a>.</p></div><p>Then we need to define a shared state class with a name and using this description in the <em>soundworks</em>&#39; state manager:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globalSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  trigger: { type: </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">, event: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F8F8F2;">server.stateManager.</span><span style="color:#A6E22E;">defineClass</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;global&#39;</span><span style="color:#F8F8F2;">, globalSchema);</span></span></code></pre></div><p>Finally, we can create a global shared state instance from this schema definition:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globalSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  trigger: { type: </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">, event: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">server.stateManager.</span><span style="color:#A6E22E;">defineClass</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;global&#39;</span><span style="color:#F8F8F2;">, globalSchema);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> global </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.stateManager.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;global&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><p>And, that&#39;s it for the server-side logic!</p><p>If everything went well, you should see no error in the Terminal, and launching a <a href="http://120.0.0.1:8000" target="_blank" rel="noreferrer">client in your browser</a> should still show you the same fancy black page.</p><h2 id="step-4-make-clients-interactive" tabindex="-1">Step 4 - Make clients interactive <a class="header-anchor" href="#step-4-make-clients-interactive" aria-label="Permalink to &quot;Step 4 - Make clients interactive&quot;">​</a></h2><p>Now that the server-side logic is ready, let&#39;s implement the client-side of our simple application.</p><p>Open a browser and go to <a href="http://127.0.0.1:8000" target="_blank" rel="noreferrer">http://127.0.0.1:8000</a>, then go back to your text editor and open the <code>src/clients/player.js</code> file.</p><p>First, let&#39;s change a line of code to modify the text on the page to make sure we can act on this fancy black screen:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#88846F;">// src/clients/player/index.js</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">renderApp</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">    &lt;div class=&quot;simple-layout&quot;&gt;</span></span>
<span class="line diff remove"><span style="color:#E6DB74;">      &lt;p&gt;Hello </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">client.config.app.name</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">!&lt;/p&gt; </span></span>
<span class="line diff add"><span style="color:#E6DB74;">      &lt;p&gt;Click here&lt;/p&gt;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6DB74;">      &lt;sw-credits .infos=&quot;</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">client.config.app</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">&quot;&gt;&lt;/sw-credits&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">  \`</span><span style="color:#F8F8F2;">, $container);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>If you reload the page (<code>Cmd + R</code> on Mac or <code>Ctrl + R</code> on Windows), you should now see the text &quot;click here&quot; displayed of the top left of your screen.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The HTML rendering is done here using the <a href="https://lit.dev/" target="_blank" rel="noreferrer">lit</a> library developed by <em>Google</em>. While we promote usage of this library in our application template, <em>soundworks</em> does not require usage of this library and could potentially be used with any other UI library or framework.</p></div><p>Now that we are sure everything works as expected and that we have control over the behavior of this Web page, let&#39;s add the following code in the same file:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#88846F;">// src/clients/player/index.js</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> global </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;global&#39;</span><span style="color:#F8F8F2;">); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;global shared state&#39;</span><span style="color:#F8F8F2;">, global.</span><span style="color:#A6E22E;">getValues</span><span style="color:#F8F8F2;">()); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">renderApp</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">    &lt;div class=&quot;simple-layout&quot;&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">      &lt;p&gt;Click here&lt;/p&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">      &lt;sw-credits .infos=&quot;</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">client.config.app</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">&quot;&gt;&lt;/sw-credits&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">  \`</span><span style="color:#F8F8F2;">, $container);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>Here, we simply attach our client to the <code>global</code> state created by the server. This means that our client will be able 1. to apply some updates to the shared state, and 2. to be notified when a change is made to the shared state from another client on the network.</p><p>The second line will just log the current values of the <code>global</code> shared state into the browser&#39;s console, so that we can make sure that the <code>global</code> shared state has been successfully attached.</p><p><img src="`+p+`" alt="browser-console"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To open the <em>JavaScript</em> console in your browser, you should press <code>Cmd + Alt + I</code> and then select the <code>Console</code> tab.</p></div><p>Now that our shared state is attached, let&#39;s write the code that allows us to react to any change made on the shared state:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> global </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;global&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;global shared state&#39;</span><span style="color:#F8F8F2;">, global.</span><span style="color:#A6E22E;">getValues</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#F8F8F2;">global.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">updates</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(updates); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">}); </span></span></code></pre></div><p>In this snippet, we use the <code>onUpdate</code> method of the <code>global</code> shared state that allows us to register a function to be executed when something is updated on the state. For now, the callback function will just log the updates in the console, but we will come back there later on to do something more fancy.</p><p>At this point, we have all the logic we need to react to a change in the <code>global</code> shared state, but nothing to actually trigger a change. So, let&#39;s now add the following code to update the value of the <code>trigger</code> parameter when the user clicks on the screen:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> global </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;global&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;global shared state&#39;</span><span style="color:#F8F8F2;">, global.</span><span style="color:#A6E22E;">getValues</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">global.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">updates</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(updates);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#F8F8F2;">$container.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {  </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  global.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">({ trigger: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> }); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">}); </span></span></code></pre></div><p>Reload the page again (<code>Cmd + Shift + R</code>), and click anywhere on the screen, you should see a new log appear in the console on each click.</p><p><img src="`+c+`" alt="browser-console-2"></p><p>Finally, let&#39;s just review the code inside the <code>onUpdate</code> callback function to change the color of the screen, instead of just logging into the console.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> global </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;global&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">global.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">updates</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(updates);</span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (updates.trigger </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">) {  </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    $container.style.backgroundColor </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;white&#39;</span><span style="color:#F8F8F2;">;  </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {  </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">      $container.style.backgroundColor </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;black&#39;</span><span style="color:#F8F8F2;">;  </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    }, </span><span style="color:#AE81FF;">50</span><span style="color:#F8F8F2;">);  </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  }  </span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre></div><p>Now, whenever the <code>trigger</code> parameter of the <code>global</code> shared state is set to <code>true</code>, we change the background color of the screen to <code>&#39;white&#39;</code> and put it back to <code>&#39;black&#39;</code> after 50 ms.</p><p>To see the shared state in action, and understand more precisely why we keep calling it a &quot;<em>shared state</em>&quot;, let&#39;s emulate several parallel browser clients in our browser window. To that end, open <a href="http://127.0.0.1:8000?emulate=8" target="_blank" rel="noreferrer">http://127.0.0.1:8000?emulate=8</a> (note the <code>?emulate=8</code> at the end of the URL).</p><p><img src="`+r+'" alt="emulated-clients"></p><p>If you click on any of these 8 emulated clients, all of them will blink. Indeed all of them are attached to the same <code>global</code> shared state, and react exactly in the same way to the updates of the state.</p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>Congrats, you just wrote your first <em>soundworks</em> application. Along the way you learned quite a few things:</p><ol><li>How to setup a <em>soundworks</em> application using the <code>@soundworks/create</code> wizard,</li><li>How to use some of the tools that are at your end to simplify development</li><li>Discovered the shared states provided by <em>soundworks</em>, and how they allow you to simplify development and to hide network complexity.</li></ol><p>On the next tutorial, we will explore more possibilities proposed by the <em>soundworks</em>&#39; distributed state management system.</p>',88)]))}const b=a(i,[["render",F]]);export{f as __pageData,b as default};
