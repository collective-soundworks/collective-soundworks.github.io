import{_ as n,o as a,c as o,O as l}from"./chunks/framework.b2c12034.js";const e="/assets/controller.f297975e.png",u=JSON.parse('{"title":"Working with Node Clients","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/node-clients.md","filePath":"tutorials/node-clients.md"}'),t={name:"tutorials/node-clients.md"};function p(c,s,r,i,F,y){return a(),o("div",null,s[0]||(s[0]=[l(`<h1 id="working-with-node-clients" tabindex="-1">Working with Node Clients <a class="header-anchor" href="#working-with-node-clients" aria-label="Permalink to &quot;Working with Node Clients&quot;">​</a></h1><p>In this tutorial, we will explore how to use <em>soundworks</em> to create clients that run within a <em>Node.js</em> process, opening new possibilities for creating applications outside Web Browsers.</p><p>Indeed, this functionality enables to work with screen less embedded hardware, such as the Raspberry Pi, which allows us to access some functionalities (e.g. control a motor or a LED) which are hard or impossible to achieve in the sandboxed environment that are Web browsers.</p><p>To illustrate this possibility and discover some of the tools you have at hand to help you, we will build a very simple application where a browser controller client can trigger a sound synthesized by another client running in a Node.js process.</p><blockquote><p>The final source code of this tutorial can be found <a href="https://github.com/collective-soundworks/tutorials/tree/main/node-clients" target="_blank" rel="noreferrer">here</a></p></blockquote><h3 id="related-documentation" tabindex="-1">Related Documentation <a class="header-anchor" href="#related-documentation" aria-label="Permalink to &quot;Related Documentation&quot;">​</a></h3><ul><li><a href="https://soundworks.dev/soundworks/Client.html" target="_blank" rel="noreferrer">Client</a></li><li><a href="https://github.com/ircam-ismm/node-web-audio-api" target="_blank" rel="noreferrer">node-web-audio-api</a></li></ul><h2 id="scaffolding-application" tabindex="-1">Scaffolding Application <a class="header-anchor" href="#scaffolding-application" aria-label="Permalink to &quot;Scaffolding Application&quot;">​</a></h2><p>Let&#39;s start as usual with scaffolding our application:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">path/to/tutorials</span></span>
<span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">@soundworks/create@latest</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">node-clients</span></span></code></pre></div><p>When the wizard asks you for plugins and libraries, just select the <code>@ircam/sc-components</code> and <code>node-web-audio-api</code> libraries:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#56ADBC;"># Install plugins</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Select the plugins you would like to install/uninstall</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#B3B42B;">+ nothing to do, aborting...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56ADBC;"># Install libraries</span></span>
<span class="line"><span style="color:#56ADBC;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Select the libraries you would like to install/uninstall</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">- Space to select. Return to submit</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#86B42B;">◉</span><span style="color:#F8F8F2;">   @ircam/sc-components</span></span>
<span class="line"><span style="color:#F8F8F2;">◯   @ircam/sc-scheduling</span></span>
<span class="line"><span style="color:#F8F8F2;">◯   @ircam/sc-utils</span></span>
<span class="line"><span style="color:#86B42B;">◉</span><span style="color:#F8F8F2;">   </span><span style="color:#56ADBC;text-decoration:underline;">node-web-audio-api</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The <a href="https://github.com/ircam-ismm/node-web-audio-api" target="_blank" rel="noreferrer"><code>node-web-audio-api</code></a> package provides an implementation of the Web Audio API specification written in the <code>Rust</code> language to be used in Node.js programs.</p><p>For those who might be interested in using the library directly in a <code>Rust</code> project, see <a href="https://github.com/orottier/web-audio-api-rs" target="_blank" rel="noreferrer">web-audio-api-rs</a></p></div><p>Then when the wizard asks you to create the default client, let&#39;s just create a browser client with the &quot;controller&quot; template (we will create our <em>Node.js</em> client later in the tutorial):</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#56ADBC;"># Create client</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Name of your new client (lowercase, no-space):</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> controller</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Which runtime for your client?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> browser</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Which template would you like to use?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> controller</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">- Creating client &quot;controller&quot; in file &quot;src/clients/controller.js&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">- name: </span><span style="color:#56ADBC;">controller</span></span>
<span class="line"><span style="color:#F8F8F2;">- runtime: </span><span style="color:#56ADBC;">browser</span></span>
<span class="line"><span style="color:#F8F8F2;">- template: </span><span style="color:#56ADBC;">controller</span></span>
<span class="line"><span style="color:#F8F8F2;">- default: </span><span style="color:#56ADBC;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Confirm?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> no </span><span style="color:#666666;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#56ADBC;text-decoration:underline;">yes</span></span></code></pre></div><p>Then let&#39;s jump into the directory and start our application:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">node-clients</span></span>
<span class="line"><span style="color:#A6E22E;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">run</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">dev</span></span></code></pre></div><h2 id="implementing-the-controller" tabindex="-1">Implementing the controller <a class="header-anchor" href="#implementing-the-controller" aria-label="Permalink to &quot;Implementing the controller&quot;">​</a></h2><p>Before implementing our <em>Node.js</em> client, let&#39;s use the features we have learned so far so that we can trigger a sound on any of our future <em>Node.js</em> clients through the <code>controller</code> interface.</p><p>Let&#39;s thus start with defining a shared state class, we will call <code>thing</code>, that will be created by each of our <em>Node.js</em> clients when they connect to the application.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#88846F;">// src/server.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> server </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Server</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"><span style="color:#A6E22E;">configureHttpRouter</span><span style="color:#F8F8F2;">(server);</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#F8F8F2;">server.stateManager.</span><span style="color:#A6E22E;">defineClass</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;thing&#39;</span><span style="color:#F8F8F2;">, { </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  id: { </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    type: </span><span style="color:#E6DB74;">&#39;integer&#39;</span><span style="color:#F8F8F2;">, </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    default: </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">, </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    nullable: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">, </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  }, </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  triggerSound: { </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    type: </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">, </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    event: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">, </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  }, </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">}); </span></span></code></pre></div><p>And that&#39;s everything we have to do on the server side!</p><p>Let&#39;s then create our control interface. First, we need to grab a collection of our &quot;thing&quot; shared states:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#88846F;">// src/clients/controller.js</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> thingCollection </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">getCollection</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;thing&#39;</span><span style="color:#F8F8F2;">); </span></span>
<span class="line diff add"><span style="color:#88846F;">// update GUI when any changes in the collection occurs </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">thingCollection.</span><span style="color:#A6E22E;">onChange</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">renderApp</span><span style="color:#F8F8F2;">()); </span></span></code></pre></div><p>Then. let&#39;s modify the <code>renderApp</code> function to show a simple graphical control interface for each <code>thing</code> state in the collection:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">renderApp</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">    &lt;div class=&quot;controller-layout&quot;&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">      &lt;header&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">        &lt;h1&gt;</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">client.config.app.name</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;"> | </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">client.role</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">        &lt;sw-audit .client=&quot;</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">client</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">&quot;&gt;&lt;/sw-audit&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">      &lt;/header&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">      &lt;section&gt;</span></span>
<span class="line diff remove"><span style="color:#E6DB74;">        &lt;p&gt;Hello </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">client.config.app.name</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">!&lt;/p&gt; </span></span>
<span class="line diff add"><span style="color:#E6DB74;">        </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">thingCollection.</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">thing</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\` </span></span>
<span class="line diff add"><span style="color:#E6DB74;">            &lt;div&gt; </span></span>
<span class="line diff add"><span style="color:#E6DB74;">              &lt;sc-text&gt;</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">thing.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;id&#39;</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">&lt;/sc-text&gt; </span></span>
<span class="line diff add"><span style="color:#E6DB74;">              &lt;sc-button </span></span>
<span class="line diff add"><span style="color:#E6DB74;">                @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> thing.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">({ triggerSound: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> })</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;"> </span></span>
<span class="line diff add"><span style="color:#E6DB74;">              &gt;trigger sound&lt;/sc-button&gt; </span></span>
<span class="line diff add"><span style="color:#E6DB74;">            &lt;/div&gt; </span></span>
<span class="line diff add"><span style="color:#E6DB74;">          \`</span><span style="color:#F8F8F2;">; </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">        })</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;"> </span></span>
<span class="line"><span style="color:#E6DB74;">      &lt;/section&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">  \`</span><span style="color:#F8F8F2;">, $container);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>Of course if you launch the controller (<a href="http://127.0.0.1:8000/" target="_blank" rel="noreferrer">http://127.0.0.1:8000/</a>) right now, the screen will be empty as we don&#39;t have any <code>thing</code> state in our colllection, but everything is now ready to create and control our Node.js clients.</p><h2 id="creating-and-running-a-node-js-client" tabindex="-1">Creating and running a <em>Node.js</em> client <a class="header-anchor" href="#creating-and-running-a-node-js-client" aria-label="Permalink to &quot;Creating and running a _Node.js_ client&quot;">​</a></h2><p>Let&#39;s shutdown our server (<code>Ctrl + C</code>) for a while and create our Node.js client using the <em>soundworks</em> wizard with the following command line:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">soundworks</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--create-client</span></span></code></pre></div><p>Enter &quot;thing&quot; as name and &quot;node&quot; as target:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#56ADBC;"># Create client</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Name of your new client (lowercase, no-space):</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> thing</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Which runtime for your client?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">- Creating client &quot;thing&quot; in file &quot;src/clients/thing.js&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">- name: </span><span style="color:#56ADBC;">thing</span></span>
<span class="line"><span style="color:#F8F8F2;">- runtime: </span><span style="color:#56ADBC;">node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56ADBC;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Confirm?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> no </span><span style="color:#666666;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#56ADBC;text-decoration:underline;">yes</span></span>
<span class="line"></span></code></pre></div><p>Once done, you can just restart the development server:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">run</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">dev</span></span></code></pre></div><p>To launch our node client, let&#39;s open a second &quot;Terminal&quot;, and run the following commands:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;"># go to the node-clients tutorial directory</span></span>
<span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">path/to/tutorials/node-clients</span></span>
<span class="line"><span style="color:#88846F;"># run you newly created node client in watch mode</span></span>
<span class="line"><span style="color:#A6E22E;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">run</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">watch</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">thing</span></span></code></pre></div><p>And tada! Your node client should now be connected to the server:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#56ADBC;">&gt; watching process	 .build/clients/thing.js</span></span>
<span class="line"><span style="color:#56ADBC;">[launcher][client thing] connecting to http://127.0.0.1:8000</span></span>
<span class="line"><span style="color:#56ADBC;">[launcher][client thing(0)] connected</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello node-clients!</span></span></code></pre></div><h2 id="implementing-the-node-js-client" tabindex="-1">Implementing the <em>Node.js</em> client <a class="header-anchor" href="#implementing-the-node-js-client" aria-label="Permalink to &quot;Implementing the _Node.js_ client&quot;">​</a></h2><p>Now that everything is setup and ready, let&#39;s write the code needed so our newly created client plays some sound when the button is clicked on the controller interface.</p><p>First, let&#39;s thus create our &quot;thing&quot; shared state and initialize its <code>id</code> field with the <code>id</code> of the <em>soundworks</em> client. Open the <code>src/clients/thing.js</code> file and add the following snippet:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line diff add"><span style="color:#88846F;">// create the thing state and initialize it&#39;s id field </span></span>
<span class="line diff add"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> thing </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;thing&#39;</span><span style="color:#F8F8F2;">, { </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  id: client.id, </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">}); </span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If you go in the &quot;Terminal&quot; where you launched the Node.js client, you should see that the client automatically restarted each time you save a file, just as with the server. This is the behavior and goal of the <code>npm run watch [process_name]</code> command.</p></div><p>If reload your controller now, you should also see the interface updated with your connected client:</p><p><img src="`+e+`" alt="controller"></p><p>Let&#39;s finally write our Web Audio code so that a sound is triggered from the <em>Node.js</em> process when the &quot;trigger sound&quot; button is pressed on the controller interface:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#88846F;">// src/clients/thing.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Client } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/core/client.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> launcher </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/helpers/launcher.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line diff add"><span style="color:#88846F;">// import some classes from the node-web-audio-api package </span></span>
<span class="line diff add"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { AudioContext, GainNode, OscillatorNode } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;node-web-audio-api&#39;</span><span style="color:#F8F8F2;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">// create an audio context (note that it is resumed by default)</span></span>
<span class="line diff add"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AudioContext</span><span style="color:#F8F8F2;">(); </span></span>
<span class="line"><span style="color:#88846F;">// create the thing state and initialize it&#39;s id field</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> thing </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;thing&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  id: client.id,</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#88846F;">// react to updates triggered from controller</span></span>
<span class="line diff add"><span style="color:#F8F8F2;">thing.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">updates</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#E6DB74;">&#39;triggerSound&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> updates) { </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> now </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.currentTime; </span></span>
<span class="line diff add"><span style="color:#F8F8F2;"> </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> env </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">GainNode</span><span style="color:#F8F8F2;">(audioContext, { gain: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> }); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    env.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    env.gain.</span><span style="color:#A6E22E;">setValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, now); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0.01</span><span style="color:#F8F8F2;">); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    env.gain.</span><span style="color:#A6E22E;">exponentialRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0.0001</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// randomly pick one of the harmonics of a sound at 50Hz </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> frequency </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">floor</span><span style="color:#F8F8F2;">(Math.</span><span style="color:#A6E22E;">random</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">50</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">; </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> osc </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">OscillatorNode</span><span style="color:#F8F8F2;">(audioContext, { frequency }); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    osc.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(env); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    osc.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">(now); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    osc.</span><span style="color:#A6E22E;">stop</span><span style="color:#F8F8F2;">(now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  } </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">}); </span></span></code></pre></div><p>And that&#39;s all! You have now a simple <em>soundworks</em> client that runs into <em>Node.js</em> process and can synthesize some sound.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>As you can see, the code you wrote to make this Node.js client work is the same as the one you would have written in a browser client.</p><p>Abstracting the platform in such a way is an important goal of <em>soundworks</em> and of the related libraries, such as the <code>node-web-audio-api</code> package.</p></div><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2><h3 id="locally-emulate-multiple-clients" tabindex="-1">Locally emulate multiple clients <a class="header-anchor" href="#locally-emulate-multiple-clients" aria-label="Permalink to &quot;Locally emulate multiple clients&quot;">​</a></h3><p>In previous tutorials, we often used the <code>?emulate=6</code> query parameter in our URL to emulate several clients in only one browser window, which is handy when developing distributed applications.</p><p>A similar behavior can be achieved with Node.js clients to run many of them in the same terminal. For example, to launch four clients in parallel, you can just write:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">EMULATE</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">run</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">watch</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">thing</span></span></code></pre></div><h3 id="running-node-js-clients-on-a-network" tabindex="-1">Running Node.js clients on a network <a class="header-anchor" href="#running-node-js-clients-on-a-network" aria-label="Permalink to &quot;Running Node.js clients on a network&quot;">​</a></h3><p>Another important point to consider is that Node.js clients do need some configuration to be able to connect to the server. Indeed, when we launch a client in a browser, we just tell the browser where to reach the server when we write the URL in the address bar of the Web browser.</p><p>However, as you may have notices, Terminals and Node.js processes don&#39;t have any address bar... Hence if your node client doesn&#39;t run into your computer but in a remote device, it will need a bit of configuration to know the IP address of the server.</p><p>The <em>soundworks</em> wizard has an dedicated command to help you to create additional environment config files:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">soundworks</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--create-env</span></span></code></pre></div><p>The command will prompt you with a series of questions to configure a environment, and in particular the question about the &quot;Address of the server&quot;:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#56ADBC;"># Create environment configuration file:</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Name of the config</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> remote</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Type:</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">›</span><span style="color:#F8F8F2;"> development</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Port (default is 80 for http and 443 for https):</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> 80</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Address of the server (domain or ip), leave empty for local development:</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> 192.168.1.34</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Use https?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> no</span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">baseUrl (if the application live behind a proxy server, leave empty for most cases):</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Do you want to protect some clients with a password?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> no</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">- creating config file &quot;env-remote.yaml&quot;:</span></span>
<span class="line"><span style="color:#F8F8F2;">\`\`\`</span></span>
<span class="line"><span style="color:#F8F8F2;">type: development</span></span>
<span class="line"><span style="color:#F8F8F2;">port: 80</span></span>
<span class="line"><span style="color:#F8F8F2;">baseUrl: &quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">serverAddress: 192.168.1.34</span></span>
<span class="line"><span style="color:#F8F8F2;">useHttps: false</span></span>
<span class="line"><span style="color:#F8F8F2;">httpsInfos:</span></span>
<span class="line"><span style="color:#F8F8F2;">  cert: null</span></span>
<span class="line"><span style="color:#F8F8F2;">  key: null</span></span>
<span class="line"><span style="color:#F8F8F2;">auth:</span></span>
<span class="line"><span style="color:#F8F8F2;">  clients: []</span></span>
<span class="line"><span style="color:#F8F8F2;">  login: &quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">  password: &quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">\`\`\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#86B42B;">✔</span><span style="color:#F8F8F2;"> </span><span style="color:#F8F8F2;font-weight:bold;">Confirm?</span><span style="color:#F8F8F2;"> </span><span style="color:#666666;">…</span><span style="color:#F8F8F2;"> yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#86B42B;">+ config file &quot;env-remote.yaml&quot; successfully created</span></span></code></pre></div><p>To use this configuration file, you will just have to start your clients by giving them the name of the config, e.g.:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">ENV</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">remote</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">run</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">watch</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">thing</span></span></code></pre></div><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>In this tutorial, we have explored an important feature of <em>soundworks</em>, i.e. the possibility to create clients that are not running in a Web browser, but rather in a <em>Node.js</em> process.</p><p>In the next tutorials, we will continue our journey into <em>soundworks</em>, by tackling the important question of synchronization between different processes and machines.</p>`,66)]))}const h=n(t,[["render",p]]);export{u as __pageData,h as default};
