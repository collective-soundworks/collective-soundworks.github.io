import{_ as s,o as a,c as n,V as l}from"./chunks/framework.7cbf217e.js";const e="/assets/install-plugin-platform-init.169972d8.png",o="/assets/create-player.ef5368fc.png",t="/assets/soundworks-devtools.d9e925b7.png",p="/assets/create-controller.1271e198.png",c="/assets/globals-server-log.822a6d53.png",r="/assets/player-log-globals.229c0b18.png",F="/assets/globals-player-controller.8731bd0a.png",i="/assets/player-full.d85e68c4.png",y="/assets/todo-noise-full.1c1a1b5b.png",k=JSON.parse('{"title":"The Todo Noise Application","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/todo-noise.md","filePath":"tutorials/todo-noise.md"}'),h={name:"tutorials/todo-noise.md"},d=l(`<h1 id="the-todo-noise-application" tabindex="-1">The <em>Todo Noise</em> Application <a class="header-anchor" href="#the-todo-noise-application" aria-label="Permalink to &quot;The _Todo Noise_ Application&quot;">​</a></h1><p>In this tutorial we will build a simple application, which shows the most common type of distributed interaction: i.e. remote monitoring and control, you will need to implement your own application.</p><p>The tutorial requires basic knowledge of the <code>soundworks</code> <a href="./state-manager.html">state manager</a> and of the <a href="./plugin-platform-init.html">platform-init plugin</a>, so please refer to the relevant tutorials if you didn&#39;t check them yet.</p><p>Along the way, we will discover the <a href="https://soundworks.dev/soundworks/client.SharedStateCollection.html" target="_blank" rel="noreferrer">SharedStateCollection</a> proposed by the soundworks&#39; state manager and, how to create our own reusable <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components" target="_blank" rel="noreferrer">Web Components</a> using the <a href="https://lit.dev/" target="_blank" rel="noreferrer">Lit</a> which is the default view framework used by soundworks.</p><h3 id="relevant-documentation-and-links" tabindex="-1">Relevant documentation and links <a class="header-anchor" href="#relevant-documentation-and-links" aria-label="Permalink to &quot;Relevant documentation and links&quot;">​</a></h3><ul><li><a href="https://soundworks.dev/soundworks/client.StateManager" target="_blank" rel="noreferrer">client.StateManager</a></li><li><a href="https://soundworks.dev/soundworks/client.SharedStateCollection.html" target="_blank" rel="noreferrer">client.SharedStateCollection</a></li><li><a href="https://soundworks.dev/soundworks/server.StateManager" target="_blank" rel="noreferrer">server.StateManager</a></li><li><a href="https://soundworks.dev/soundworks/server.SharedStateCollection.html" target="_blank" rel="noreferrer">server.SharedStateCollection</a></li><li><a href="https://github.com/collective-soundworks/soundworks-plugin-platform-init" target="_blank" rel="noreferrer">@soundworks/plugin-platform-init</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components" target="_blank" rel="noreferrer">Web Components</a></li><li><a href="https://lit.dev/" target="_blank" rel="noreferrer">Lit</a></li></ul><h2 id="user-story" tabindex="-1">User Story <a class="header-anchor" href="#user-story" aria-label="Permalink to &quot;User Story&quot;">​</a></h2><p>The application purposely privileges the point of view of a user in a working situation (i.e. developer, designer, composer or performer) rather than the point of view of the end user (e.g. participant, audience). Indeed, while the later is generally be very specific to the application or artwork, the former generally requires properties and features that are quite common. As such the application is composed of two different types of clients: the <code>player</code> and the <code>controller</code></p><p>The <code>player</code> can be envisioned as the client dedicated to the end users. The application can accept any number of players and each player has access to the following fonctionalities:</p><ul><li>It can trigger a sound.</li><li>It can start and stop a synthesizer.</li><li>It can update a parameter (i.e. the frequency of the synths).</li></ul><p>The <code>controller</code> is dedicated to the user in working situation, be it during the creation or the performance of the artwork. The application can accept any number of controllers and each of them has access to the following fonctionalities:</p><ul><li>It controls global parameters of the application (i.e. mute, master volume). These globals parameters must indeed be synchronized across every clients of the application (i.e. player and controller).</li><li>It can take full control over any <code>player</code>, i.e. the change the volume, trigger a sound and change the state of the synthesizer.</li></ul><p>This minimal set of functionalities should provide you a good overview of several important and recurring patterns of real-time distributed audio applications.</p><h2 id="scaffolding-the-application" tabindex="-1">Scaffolding the application <a class="header-anchor" href="#scaffolding-the-application" aria-label="Permalink to &quot;Scaffolding the application&quot;">​</a></h2><p>First thing first, let&#39;s generate a new empty application with the <code>@soundworks/create</code> wizard:</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If needed, refer to the <a href="/tutorials/getting-started.html">getting-started</a> page to learn more on how to run the wizard</p></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">/path/to/working/directory</span></span>
<span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">@soundworks/create@latest</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">todo-noise</span></span></code></pre></div><p>You can already select the <a href="https://github.com/collective-soundworks/soundworks-plugin-platform-init" target="_blank" rel="noreferrer"><code>@soundworks/plugin-platform-init</code></a> plugin to have it installed.</p><p><img src="`+e+'" alt="install-plugin-platform-init"></p><p>Then, when the wizard asks you for the name of the default client, just call it <code>player</code> (with the <code>browser</code> target and the <code>default</code> template).</p><p><img src="'+o+`" alt="create-player"></p><p>Once the wizard ended, let&#39;s launch the <code>soundworks</code> development tools inside our application and select the &quot;create a new soundworks client&quot; option to create our second <code>controller</code> client:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">todo-noise</span></span>
<span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">soundworks</span></span></code></pre></div><p><img src="`+t+'" alt="soundworks-devtools"></p><p>The devtool wizard will ask you for the same questions as when you just created the <code>player</code> client. This time call the client <code>controller</code>, choose the <code>browser</code> target and the <code>controller</code> template. Select <code>no</code> when the tool asks if the client should be used as default:</p><p><img src="'+p+`" alt="create-controller"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Selecting a client as the default means the client will be accessible at the root of the domain, which is more simple if you want to share an url with the public for example). In the other case the name of the client will be used as the route to access it.</p><p>For example, in our application the <code>player</code> client would be accessible at <code>http://my-domain.com</code> while the <code>controller</code> client would be accessible at <code>http://my-domain.com/controller</code></p></div><p>Once done, we can exit the command-line devtool by typing <code>Ctrl+C</code> or by choosing the &quot;exit&quot; option.</p><p>Now that our project is scaffolded, let&#39;s create the schemas describing the states for each <code>player</code> as well as the global state.</p><h2 id="creating-and-using-the-shared-globals-state" tabindex="-1">Creating and using the shared <code>globals</code> state <a class="header-anchor" href="#creating-and-using-the-shared-globals-state" aria-label="Permalink to &quot;Creating and using the shared \`globals\` state&quot;">​</a></h2><p>As mentionned in the user story, the application rely on 2 types of schema:</p><ul><li>A schema that is tied to each connected player, i.e. each <code>player</code> client will create its own state instance from this schema.</li><li>A schema defining global variables of the application (e.g. mute, master volume) which will be unique and shared by every connected clients.</li></ul><p>Let&#39;s start by defining and creating the global schema. Create a new file named <code>globals.js</code> in the <code>src/server/schemas/</code> directory, and fill it with the following code:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// src/server/schemas/globals.js</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  master: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: </span><span style="color:#E6DB74;">&#39;float&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    default: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    min: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    max: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  mute: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    default: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre></div><p>The global state derived from this schema will keep track of the master volume applied to all connected <code>player</code> clients (i.e. a gain between 0 and 1), and wether they are is muted or not.</p><p>Once done, let&#39;s instaciate the shared <code>globals</code> state on the server and attach all clients (i.e. <code>players</code>s and <code>controller</code>s to it).</p><h3 id="create-the-shared-instance" tabindex="-1">Create the shared instance <a class="header-anchor" href="#create-the-shared-instance" aria-label="Permalink to &quot;Create the shared instance&quot;">​</a></h3><p>First let&#39;s create the shared instance on the server:</p><ol><li>Import the schema in <code>src/server/index.js</code>:</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/server/index.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { loadConfig } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;../utils/load-config.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;../utils/catch-unhandled-errors.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> globalsSchema </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./schemas/globals.js&#39;</span><span style="color:#F8F8F2;">;</span></span></code></pre></div><ol start="2"><li>Register the schema into the state manager and create the <code>globals</code> state instance:</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/server/index.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> server </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Server</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"><span style="color:#F8F8F2;">server.</span><span style="color:#A6E22E;">useDefaultApplicationTemplate</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#88846F;">// register the globals schema</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">server.stateManager.</span><span style="color:#A6E22E;">registerSchema</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">, globalsSchema);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#88846F;">// create the shared globals state instance</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globals </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.stateManager.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(globals.</span><span style="color:#A6E22E;">getValues</span><span style="color:#F8F8F2;">());</span></span></code></pre></div><p>Let&#39;s now start our server using <code>npm run dev</code>, you should see the current default values of the state logged in the terminal:</p><p><img src="`+c+`" alt="globals-server-log"></p><h3 id="attaching-the-globals-state-to-player-clients" tabindex="-1">Attaching the <code>globals</code> state to <code>player</code> clients <a class="header-anchor" href="#attaching-the-globals-state-to-player-clients" aria-label="Permalink to &quot;Attaching the \`globals\` state to \`player\` clients&quot;">​</a></h3><p>Let&#39;s now attach all our <code>player</code> clients to the shared state. For now we will only display its current values on the screen and will keep the actual audio code for later.</p><p>To attach to the <code>globals</code> state, write the following snippet in the <code>src/clients/player/index.js</code> file:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/clients/player/index.js</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globals </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><p>Then, import the <code>html</code> templating function from the <a href="https://lit.dev/" target="_blank" rel="noreferrer">Lit</a> library and add a simple debugging component to the layout that we will render each time the state is updated:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/client/player/index</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> launcher </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/helpers/launcher.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { html } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;lit&#39;</span><span style="color:#F8F8F2;">;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/client/player/index</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globals </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> $layout </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createLayout</span><span style="color:#F8F8F2;">(client, $container);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">// add simple log component to the layout</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">$layout.</span><span style="color:#A6E22E;">addComponent</span><span style="color:#F8F8F2;">({</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      &lt;h2&gt;Globals&lt;/h2&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      &lt;p&gt;Master: </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">globals.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;master&#39;</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">&lt;/p&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      &lt;p&gt;Mute: </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">globals.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;mute&#39;</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">&lt;/p&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    \`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  }</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">});</span></span>
<span class="line highlighted"><span style="color:#88846F;">// update the view each time the globals state is changed</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">globals.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> $layout.</span><span style="color:#A6E22E;">requestUpdate</span><span style="color:#F8F8F2;">());</span></span></code></pre></div><p>If you open a player client at <a href="http://127.0.0.1:8000" target="_blank" rel="noreferrer"><code>http://127.0.0.1:8000</code></a> you should now see the following:</p><p><img src="`+r+`" alt="player-log-globals"></p><h3 id="controlling-the-globals-from-the-controller-clients" tabindex="-1">Controlling the <code>globals</code> from the <code>controller</code> clients <a class="header-anchor" href="#controlling-the-globals-from-the-controller-clients" aria-label="Permalink to &quot;Controlling the \`globals\` from the \`controller\` clients&quot;">​</a></h3><p>Now that everything is setup on the <code>player</code> side, let&#39;s implement our <code>controller</code> client to be able to control the <code>globals</code> state on all connected clients. Similarly to the <code>player</code> clients, let&#39;s first open the <code>src/clients/controller/index.js</code> and attach to the <code>globals</code> state:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/client/controller/index.js</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globals </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><p>Then let&#39;s install the <a href="https://ircam-ismm.github.io/simple-components/" target="_blank" rel="noreferrer"><code>@ircam/simple-components</code></a> library and create our control interface. First let&#39;s go back to the Terminal, close our development server using <code>Ctrl+C</code>, install the library and restart the server:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--save</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">@ircam/simple-components</span></span>
<span class="line"><span style="color:#A6E22E;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">run</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">dev</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You could also use the <code>soundworks</code> devtool to install the library, be aware that the devtool will launch the exact same <code>npm</code> command under the hood.</p></div><p>Now that the library is installed, let&#39;s import the components we need (i.e. text, slider and toggle) into our controller&#39;s <code>index.js</code> file:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/client/controller/index.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> createLayout </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./views/layout.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { html } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;lit&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@ircam/simple-components/sc-text.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@ircam/simple-components/sc-slider.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@ircam/simple-components/sc-toggle.js&#39;</span><span style="color:#F8F8F2;">;</span></span></code></pre></div><p>And finally, add the control component to the layout to control the <code>globals</code> shared state:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/client/controller/index.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globals </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> $layout </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createLayout</span><span style="color:#F8F8F2;">(client, $container);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">// add a control component to the layout</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">$layout.</span><span style="color:#A6E22E;">addComponent</span><span style="color:#F8F8F2;">({</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      &lt;h2&gt;Globals&lt;/h2&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      &lt;div style=&quot;padding-bottom: 4px&quot;&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">        &lt;sc-text value=&quot;master&quot; readonly&gt;&lt;/sc-text&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">        &lt;sc-slider</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">          min=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">globals.</span><span style="color:#A6E22E;">getSchema</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;master&#39;</span><span style="color:#F8F8F2;">).min</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">          max=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">globals.</span><span style="color:#A6E22E;">getSchema</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;master&#39;</span><span style="color:#F8F8F2;">).max</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">          value=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">globals.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;master&#39;</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">          width=&quot;400&quot;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">          @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> globals.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">({ master: e.detail.value })</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">        &gt;&lt;/sc-slider&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      &lt;/div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      &lt;div style=&quot;padding-bottom: 4px&quot;&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">        &lt;sc-text value=&quot;mute&quot; readonly&gt;&lt;/sc-text&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">        &lt;sc-toggle</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">          ?active=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">globals.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;mute&#39;</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">          @change=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> globals.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">({ mute: e.detail.value })</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">        &gt;&lt;/sc-toggle&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      &lt;/div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    \`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  }</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">});</span></span>
<span class="line highlighted"><span style="color:#88846F;">// update the view when the globals state change</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">globals.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> $layout.</span><span style="color:#A6E22E;">requestUpdate</span><span style="color:#F8F8F2;">());</span></span></code></pre></div><p>Now if you open a <code>player</code> (<a href="http://127.0.0.1:8000" target="_blank" rel="noreferrer"><code>http://127.0.0.1:8000</code></a>) and a <code>controller</code> (<a href="http://127.0.0.1:8000/controller" target="_blank" rel="noreferrer"><code>http://127.0.0.1:8000/controller</code></a>) in two different windows side by side you should how you can remote control all <code>player</code>s from a central controller:</p><p><img src="`+F+`" alt="globals-player-controller"></p><h2 id="creating-and-using-the-player-state" tabindex="-1">Creating and using the <code>player</code> state <a class="header-anchor" href="#creating-and-using-the-player-state" aria-label="Permalink to &quot;Creating and using the \`player\` state&quot;">​</a></h2><p>As defined in our user story, we also want the clients to have some controls on their own interface, but importantly we want to be able to take control on any client remotely to simplify and fasten our development and creation process.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Indeed, one you start working with several physical devices (e.g. smartphones, tablets), being able to control each of them from a single point can save you a lot of time, which will be better used to improve your artwork and experience.</p></div><h3 id="creating-the-state" tabindex="-1">Creating the state <a class="header-anchor" href="#creating-the-state" aria-label="Permalink to &quot;Creating the state&quot;">​</a></h3><p>To that end, let&#39;s first create and register another schema, from which we will create a new state for each connected players. So let&#39;s create a new <code>src/server/schemas/player.js</code> file with the following snippet:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// src/server/schemas/player.js</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  id: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: </span><span style="color:#E6DB74;">&#39;integer&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    default: </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    nullable: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  frequency: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: </span><span style="color:#E6DB74;">&#39;float&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    default: </span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    min: </span><span style="color:#AE81FF;">50</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    max: </span><span style="color:#AE81FF;">2000</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  synthStartStop: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    default: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    immediate: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  synthTrigger: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    event: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    immediate: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre></div><p>Then register the schema in the server&#39;s stateManager:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/server/index.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> globalsSchema </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./schemas/globals.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> playerSchema </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./schemas/player.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">server.stateManager.</span><span style="color:#A6E22E;">registerSchema</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">, globalsSchema);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">server.stateManager.</span><span style="color:#A6E22E;">registerSchema</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;player&#39;</span><span style="color:#F8F8F2;">, playerSchema);</span></span></code></pre></div><p>This values contains in these states will allow us to implement two different types of synthesizer with very common behavior: one which can be started and stopped (e.g. playing a sound file in a loop, see <code>synthStartStop</code>) and a second that is triggered by an event (see <code>synthTrigger</code>). To keep the audio code simple and focus on the architecture and the logic of the application we will create very simple synthesizers based on oscillators and use the same <code>frequency</code> value for the two synths.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Note the <code>immediate</code> attribute for the <code>synthStartStop</code> and <code>synthTrigger</code> which one of the different behavior that can be twicked in shared states. In this case <code>immediate</code> means that the value is propagated locally before being propagated on the network to keep the latency and responsiveness of the interface to the minimum. See the different <a href="https://soundworks.dev/soundworks/server.StateManager.html#~schema" target="_blank" rel="noreferrer">schema type definitions</a> for more informations.</p></div><p>So let&#39;s first create a new <code>player</code> state on each <code>player</code> client. To that end, add the following snippet in <code>src/clients/player/index.js</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/clients/player/index.js</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globals </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;player&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  id: client.id,</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">});</span></span></code></pre></div><p>The second argument passed the <code>stateManager.create</code> method allows to define initialization values of the state. Here, we simply pass the <code>client.id</code> generated by <code>soundworks</code> to the state so we can easily track which state is bound to which client.</p><h3 id="creating-the-graphical-user-interface" tabindex="-1">Creating the graphical user interface <a class="header-anchor" href="#creating-the-graphical-user-interface" aria-label="Permalink to &quot;Creating the graphical user interface&quot;">​</a></h3><p>Then, let&#39;s create the <code>player</code> state control interface. To that end, we will create a simple Web Component using the <code>Lit</code> library which will allow us to simply reuse the component later in the <code>controller</code> interface to remotely take control over any connected <code>player</code>. Let&#39;s thus create a new file <code>sw-player.js</code> in the <code>src/clients/components</code> directory, and add the following snippet:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// src/players/components/sw-player.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { LitElement, html, css } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;lit&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { live } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;lit/directives/live.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// import needed GUI components</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@ircam/simple-components/sc-text.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@ircam/simple-components/sc-slider.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@ircam/simple-components/sc-toggle.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@ircam/simple-components/sc-bang.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">SwPlayer</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">LitElement</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">super</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// stores the \`player\` state</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerState </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// stores the \`unsubscribe\` callback returned by the \`state.onUpdate\` methos</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// https://soundworks.dev/soundworks/client.SharedState.html#onUpdate</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">._unobserve </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">connectedCallback</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">super</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">connectedCallback</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// update the component when a state change occurs</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">._unobserve </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerState.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">requestUpdate</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">disconnectedCallback</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">super</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">disconnectedCallback</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// stop reacting to state change when the element is removed from the DOM</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">_unobserve</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// create controls for the player state</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">      &lt;h2&gt;Player [id: </span><span style="color:#F92672;">\${</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerState.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;id&#39;</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">]&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">      &lt;div style=&quot;padding-bottom: 4px;&quot;&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">        &lt;sc-text value=&quot;Frequency&quot; readonly&gt;&lt;/sc-text&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">        &lt;sc-slider</span></span>
<span class="line"><span style="color:#E6DB74;">          width=&quot;400&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">          min=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerState.</span><span style="color:#A6E22E;">getSchema</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;frequency&#39;</span><span style="color:#F8F8F2;">).min</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#E6DB74;">          max=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerState.</span><span style="color:#A6E22E;">getSchema</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;frequency&#39;</span><span style="color:#F8F8F2;">).max</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#E6DB74;">          value=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerState.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;frequency&#39;</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#E6DB74;">          @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerState.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">({ frequency: e.detail.value })</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#E6DB74;">        &gt;&lt;/sc-slider&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">      &lt;/div&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">      &lt;div style=&quot;padding-bottom: 4px;&quot;&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">        &lt;sc-text value=&quot;Start / Stop synth&quot; readonly&gt;&lt;/sc-text&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">        &lt;sc-toggle</span></span>
<span class="line"><span style="color:#E6DB74;">          ?active=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerState.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;synthStartStop&#39;</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#E6DB74;">          @change=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerState.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">({ synthStartStop: e.detail.value })</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#E6DB74;">        &gt;&lt;/sc-toggle&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">      &lt;/div&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">      &lt;div style=&quot;padding-bottom: 4px;&quot;&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">        &lt;sc-text value=&quot;Trigger Synth&quot; readonly&gt;&lt;/sc-text&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">        &lt;sc-bang</span></span>
<span class="line"><span style="color:#E6DB74;">          ?active=</span><span style="color:#F92672;">\${</span><span style="color:#A6E22E;">live</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerState.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;synthTrigger&#39;</span><span style="color:#F8F8F2;">))</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#E6DB74;">          @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerState.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">({ synthTrigger: e.detail.value })</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#E6DB74;">        &gt;&lt;/sc-bang&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">      &lt;/div&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">    \`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// register the component into the custom elements registry</span></span>
<span class="line"><span style="color:#F8F8F2;">customElements.</span><span style="color:#A6E22E;">define</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;sw-player&#39;</span><span style="color:#F8F8F2;">, SwPlayer);</span></span></code></pre></div><p>Once done, we only need to import and add our newly created component to the layout and pass it our <code>player</code> state:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/clients/player/index.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> createLayout </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./views/layout.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;../components/sw-player.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> player </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;player&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  id: client.id,</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> $layout </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createLayout</span><span style="color:#F8F8F2;">(client, $container);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">$layout.</span><span style="color:#A6E22E;">addComponent</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`&lt;sw-player .playerState=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">player</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">&gt;&lt;/sc-player&gt;\`</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><p>Your player should now look like the following:</p><p><img src="`+i+`" alt="player-full"></p><h3 id="creating-the-synths" tabindex="-1">Creating the synths <a class="header-anchor" href="#creating-the-synths" aria-label="Permalink to &quot;Creating the synths&quot;">​</a></h3><p>Eveything is ready to react to our states (both <code>player</code> and <code>globals</code> states) changes to trigger some sounds.</p><p>Let&#39;s first instanciate a new <code>AudioContext</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/clients/player/index.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> config </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> window.SOUNDWORKS_CONFIG;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">// If multiple clients are emulated you might to want to share the audio context</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AudioContext</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">main</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">$container</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// ...</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><h4 id="resume-the-context-with-the-platform-init-plugin" tabindex="-1">Resume the context with the <code>platform-init</code> plugin <a class="header-anchor" href="#resume-the-context-with-the-platform-init-plugin" aria-label="Permalink to &quot;Resume the context with the \`platform-init\` plugin&quot;">​</a></h4><p>As seen in in the <a href="./plugin-platform-init.html">platform-init plugin</a> tutorial, the audio context needs a user gesture to be resume and be allowed to produce sound by the browser, so let&#39;s just import and configure it properly (just remind that we have already asked the wizard to install it at the beginning of the tutorial).<br> Let&#39;s start with the server side:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/server/index.js</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> pluginPlatformInit </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/plugin-platform-init/server.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> globalsSchema </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./schemas/globals.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> playerSchema </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./schemas/player.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> server </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Server</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"><span style="color:#F8F8F2;">server.</span><span style="color:#A6E22E;">useDefaultApplicationTemplate</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F8F8F2;">server.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;platform-init&#39;</span><span style="color:#F8F8F2;">, pluginPlatformInit);</span></span></code></pre></div><p>And do the same on the client side:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/clients/player/index.js</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> pluginPlatformInit </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/plugin-platform-init/client.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> createLayout </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./views/layout.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> client </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Client</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">// register the platform-init plugin, and pass it the AudioContext instance</span></span>
<span class="line highlighted"><span style="color:#88846F;">// so that it is resumed on the splashscreen user gesture</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">client.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;platform-init&#39;</span><span style="color:#F8F8F2;">, pluginPlatformInit, {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  audioContext</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">});</span></span></code></pre></div><h4 id="create-the-master-chain" tabindex="-1">Create the master chain <a class="header-anchor" href="#create-the-master-chain" aria-label="Permalink to &quot;Create the master chain&quot;">​</a></h4><p>Then we will start by creating the master bus chain that will be controlled by the <code>globals</code> state, i.e. a <a href="https://developer.mozilla.org/en-US/docs/Web/API/GainNode" target="_blank" rel="noreferrer"><code>GainNode</code></a> for the <code>master</code> volume parameter, and another one for the <code>mute</code> parameter:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line highlighted"><span style="color:#88846F;">// create the audio chain</span></span>
<span class="line highlighted"><span style="color:#88846F;">// [mute] -&gt; [master] -&gt; [destination]</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> master </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">master.gain.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> globals.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;master&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">master.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mute </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">mute.gain.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> globals.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;mute&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">mute.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(master);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// update the view each time the globals state is changed</span></span>
<span class="line"><span style="color:#F8F8F2;">globals.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> $layout.</span><span style="color:#A6E22E;">requestUpdate</span><span style="color:#F8F8F2;">());</span></span></code></pre></div><p>Now, let&#39;s modify our <code>globals.onUpdate</code> callback, so that any change to the parameters are applied on the audio nodes:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">globals.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">updates</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [key, value] </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">(updates)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;"> (key) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;master&#39;</span><span style="color:#F8F8F2;">: {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> now </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.currentTime;</span></span>
<span class="line"><span style="color:#F8F8F2;">        master.gain.</span><span style="color:#A6E22E;">setTargetAtTime</span><span style="color:#F8F8F2;">(value, now, </span><span style="color:#AE81FF;">0.02</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;mute&#39;</span><span style="color:#F8F8F2;">: {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> gain </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> now </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.currentTime;</span></span>
<span class="line"><span style="color:#F8F8F2;">        mute.gain.</span><span style="color:#A6E22E;">setTargetAtTime</span><span style="color:#F8F8F2;">(gain, now, </span><span style="color:#AE81FF;">0.02</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// update the view each time to log current globals values</span></span>
<span class="line"><span style="color:#F8F8F2;">  $layout.</span><span style="color:#A6E22E;">requestUpdate</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setTargetAtTime" target="_blank" rel="noreferrer"><code>AudioParam::setTargetAtTime</code></a> method is very usefull to simply control audio parameters in real-time without click and pops.</p></div><p>To test that eveything works as expected you can simply add a simple oscillator at the beginning of the chain, and play with a controller to control one or several <code>player</code> clients:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> osc </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createOscillator</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">osc.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(mute);</span></span>
<span class="line"><span style="color:#F8F8F2;">osc.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span></code></pre></div><p>Don&#39;t forget to remove this snippet once before going to the next step...</p><h4 id="implement-the-two-synths" tabindex="-1">Implement the two synths <a class="header-anchor" href="#implement-the-two-synths" aria-label="Permalink to &quot;Implement the two synths&quot;">​</a></h4><p>Now that everything is ready, we can finally implement our two synths. Just recall that to keep things simple and focus on the general architecture we will only create simple synths based on oscillators, however the exact same principles could be used for complex synthesizers with numerous parameters.</p><p>Let&#39;s thus add the following snippet to our code in order to react to <code>player</code> state updates:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> synthStartStop </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">player.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">updates</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [key, value] </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">entries</span><span style="color:#F8F8F2;">(updates)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;"> (key) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;synthStartStop&#39;</span><span style="color:#F8F8F2;">: {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (value </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#88846F;">// start the synth</span></span>
<span class="line"><span style="color:#F8F8F2;">          synthStartStop </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createOscillator</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">          synthStartStop.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(mute);</span></span>
<span class="line"><span style="color:#F8F8F2;">          synthStartStop.frequency.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> player.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;frequency&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">          synthStartStop.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#88846F;">// stop the synth</span></span>
<span class="line"><span style="color:#F8F8F2;">          synthStartStop.</span><span style="color:#A6E22E;">stop</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">          synthStartStop </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;synthTrigger&#39;</span><span style="color:#F8F8F2;">: {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// trigger a 1 second sound at twice the frequency</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> now </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.currentTime;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> env </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        env.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(mute);</span></span>
<span class="line"><span style="color:#F8F8F2;">        env.gain.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        env.gain.</span><span style="color:#A6E22E;">setValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, now);</span></span>
<span class="line"><span style="color:#F8F8F2;">        env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0.01</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        env.gain.</span><span style="color:#A6E22E;">exponentialRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0.001</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> osc </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createOscillator</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        osc.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(env);</span></span>
<span class="line"><span style="color:#F8F8F2;">        osc.frequency.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> player.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;frequency&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        osc.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">(now);</span></span>
<span class="line"><span style="color:#F8F8F2;">        osc.</span><span style="color:#A6E22E;">stop</span><span style="color:#F8F8F2;">(now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;frequency&#39;</span><span style="color:#F8F8F2;">: {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// update the start / stop synth frequency if it is runnings</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (synthStartStop </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> now </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.currentTime;</span></span>
<span class="line"><span style="color:#F8F8F2;">          synthStartStop.frequency.</span><span style="color:#A6E22E;">setTargetAtTime</span><span style="color:#F8F8F2;">(value, now, </span><span style="color:#AE81FF;">0.02</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre></div><p>And that&#39;s all! Our players are now fully functionnal, and their master chain can be controlled remotely from the controllers.</p><p>Let&#39;s now finish the project by enabling full remote control of any player client from a controller.</p><h2 id="remotely-control-players-from-the-controller" tabindex="-1">Remotely control players from the controller <a class="header-anchor" href="#remotely-control-players-from-the-controller" aria-label="Permalink to &quot;Remotely control players from the controller&quot;">​</a></h2><p>Let&#39;s go back to our controller and to get a list of all connected players. To that end, the soundworks state manager expose a <a href="https://soundworks.dev/soundworks/client.StateManager.html#getCollection" target="_blank" rel="noreferrer"><code>getCollection</code></a> method which allows to grab a list that mirror all the state created on the network according to a given schema name. The collection automatically kept synchonized with the states that are created and deleted on the network.</p><p>First, we need to import new dependencies, among them the Web Component we created for the player client:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/clients/controller/index.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { html, nothing } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;lit&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { keyed } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;lit/directives/keyed.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@ircam/simple-components/sc-text.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@ircam/simple-components/sc-slider.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@ircam/simple-components/sc-toggle.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@ircam/simple-components/sc-button.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;../components/sw-player.js&#39;</span><span style="color:#F8F8F2;">;</span></span></code></pre></div><p>Then, let&#39;s create our <code>player</code> collection using the state manager:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/clients/controller/index.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globals </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> players </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">getCollection</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;player&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> $layout </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createLayout</span><span style="color:#F8F8F2;">(client, $container);</span></span></code></pre></div><p>Finally we just need to add a component to our layout listing the connected player, and instanciating the <code>sw-player</code> component when a player is selected to be controlled remotely:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/clients/controller/index.js</span></span>
<span class="line highlighted"><span style="color:#88846F;">// placeholder of the remote controlled player state instance</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> remoteControlledPlayer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#88846F;">// collection</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">$layout.</span><span style="color:#A6E22E;">addComponent</span><span style="color:#F8F8F2;">({</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      &lt;h2&gt;Connected players&lt;/h2&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">players.</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">player</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">          &lt;sc-button</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">            value=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">player.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;id&#39;</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">            @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">              remoteControlledPlayer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> player;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">              $layout.</span><span style="color:#A6E22E;">requestUpdate</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">            }</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">          &gt;&lt;/sc-button&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">        \`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">      })</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      &lt;h2&gt;Remote controlled player&lt;/h2&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">remoteControlledPlayer </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">keyed</span><span style="color:#F8F8F2;">(</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">            remoteControlledPlayer.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;id&#39;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">            </span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`&lt;sw-player .playerState=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">remoteControlledPlayer</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">&gt;&lt;/sw-player&gt;\`</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">          )</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> nothing</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    \`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  }</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// update the view when the globals state change</span></span>
<span class="line"><span style="color:#F8F8F2;">globals.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> $layout.</span><span style="color:#A6E22E;">requestUpdate</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">// if a player connects or disconnect, we want to update the view accordingly</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">players.</span><span style="color:#A6E22E;">onAttach</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> $layout.</span><span style="color:#A6E22E;">requestUpdate</span><span style="color:#F8F8F2;">());</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">players.</span><span style="color:#A6E22E;">onDetach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">player</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// if the player is deleted, we reset the view</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (player </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> remoteControlledPlayer) {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    remoteControlledPlayer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  }</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  $layout.</span><span style="color:#A6E22E;">requestUpdate</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">});</span></span></code></pre></div><p>If you now open a controller (<a href="http://127.0.0.1:8000/controller" target="_blank" rel="noreferrer">http://127.0.0.1:8000/controller</a>) and emulate several clients in a different window ((<a href="http://127.0.0.1:8000?emulate=3" target="_blank" rel="noreferrer">http://127.0.0.1:8000?emulate=3</a>), you should now see the full application and how the players and controller are kept synchronized through the shared states:</p><p><img src="`+y+'" alt="todo-noise-full"></p><h2 id="going-further" tabindex="-1">Going Further <a class="header-anchor" href="#going-further" aria-label="Permalink to &quot;Going Further&quot;">​</a></h2><p>In this tutorial, you have learned an important pattern that soundworks aims to simplify: the ability of simply creating remote control and monitoring of clients through the shared states. Along the way, you have learned how to create a reusable Web Component using the Lit library.</p><p>While the application purposely simplified important aspects of the application to focus on these points, a number of features could improved with simple modification to the structure. For example:</p><ul><li>Improve the start / stop synth so that no click occurs when it is stopped.</li><li>Create more complex synthesizers with more complex audio chains and more parameters.</li><li>Improve the master chain, e.g. use decibels for the master volume to make the slider behavior more natural, add low pass and high pass filters.</li><li>Refactor the synthsizers with classes to create reusable components.</li><li>etc.</li></ul>',123),g=[d];function u(m,E,f,b,w,v){return a(),n("div",null,g)}const A=s(h,[["render",u]]);export{k as __pageData,A as default};
