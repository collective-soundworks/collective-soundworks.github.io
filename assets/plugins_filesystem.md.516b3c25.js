import{_ as e,o as t,c as s,V as a}from"./chunks/framework.7cbf217e.js";const y=JSON.parse('{"title":"soundworks | plugin filesystem","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/filesystem.md","filePath":"plugins/filesystem.md"}'),l={name:"plugins/filesystem.md"},n=a(`<h1 id="soundworks-plugin-filesystem" tabindex="-1">soundworks | plugin filesystem <a class="header-anchor" href="#soundworks-plugin-filesystem" aria-label="Permalink to &quot;soundworks | plugin filesystem&quot;">​</a></h1><p><a href="https://badge.fury.io/js/@soundworks%2Fplugin-filesystem" target="_blank" rel="noreferrer"><img src="https://badge.fury.io/js/@soundworks%2Fplugin-filesystem.svg" alt="npm version"></a></p><p><a href="https://soundworks.dev" target="_blank" rel="noreferrer"><code>soundworks</code></a> plugin to watch directories and update their contents from any node.</p><h2 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of Contents&quot;">​</a></h2><ul><li><a href="#installation">Installation</a></li><li><a href="#usage">Usage</a><ul><li><a href="#server">Server</a></li><li><a href="#client">Client</a></li></ul></li><li><a href="#notes">Notes</a><ul><li><a href="#reading-files">Reading files</a></li><li><a href="#security">Security</a></li></ul></li><li><a href="#api">API</a><ul><li><a href="#classes">Classes</a></li><li><a href="#pluginfilesystemclient">PluginFilesystemClient</a></li><li><a href="#pluginfilesystemserver">PluginFilesystemServer</a></li></ul></li><li><a href="#credits">Credits</a></li><li><a href="#license">License</a></li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">@soundworks/plugin-filesystem</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--save</span></span></code></pre></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><h3 id="server" tabindex="-1">Server <a class="header-anchor" href="#server" aria-label="Permalink to &quot;Server&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// index.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Server } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/core/server&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> pluginFilesystemFactory </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/plugin-filesystem/server&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> server </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Server</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">server.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;filesystem&#39;</span><span style="color:#F8F8F2;">, pluginFilesystemFactory, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// path to the watched directory, can be relative to process.cwd()</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// or absolute, in all cases file paths in the tree will be normalized</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// to be relative to \`process.cwd()\`</span></span>
<span class="line"><span style="color:#F8F8F2;">  dirname: </span><span style="color:#E6DB74;">&#39;path/to/directory&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// if defined, add an \`url\` to each tree node, that defines the</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// route at which the files are publicly accessible.</span></span>
<span class="line"><span style="color:#F8F8F2;">  publicPath: </span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> filesystem </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> servre.pluginManager.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;filesystem&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> filesystem.</span><span style="color:#A6E22E;">writeFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;my-file.txt&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Hello Server&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><h3 id="client" tabindex="-1">Client <a class="header-anchor" href="#client" aria-label="Permalink to &quot;Client&quot;">​</a></h3><h4 id="registering-the-plugin" tabindex="-1">Registering the plugin <a class="header-anchor" href="#registering-the-plugin" aria-label="Permalink to &quot;Registering the plugin&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// index.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Client } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/core/client&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> pluginFilesystem </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/plugin-filesystem/client&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> client </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Client</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">client.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;filesystem&#39;</span><span style="color:#F8F8F2;">, pluginFilesystem, {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> filesystem </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.pluginManager.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;filesystem&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> filesystem.</span><span style="color:#A6E22E;">writeFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;my-file.txt&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Hello Client&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2><h3 id="reading-files" tabindex="-1">Reading files <a class="header-anchor" href="#reading-files" aria-label="Permalink to &quot;Reading files&quot;">​</a></h3><p>For now, the filesystem plugin does not provide any way to read files due to the impossibility to have consistent file representation between node and the browser, and to the large type of files that would require different handling or processing (e.g. image, sound, text).</p><p>According to your specific needs you can rely on other plugins (e.g. audio-buffer-loader) or on the state manager (e.g. for text files) to read and share the files.</p><h3 id="security" tabindex="-1">Security <a class="header-anchor" href="#security" aria-label="Permalink to &quot;Security&quot;">​</a></h3><p>Being able to write and delete files from any connected client poses evident security questions, moreover if your application aims at running online. To prevent such issues, all sensible operations (i.e. other than listing the files) of the plugin are blocked if the <code>env.type</code> config option passed to the soundworks server is set to <code>production</code>.</p><p>In such case, only trusted clients that authentified by a login and password will be able to perform these operations.</p><p>See the <code>config/env-**.js</code> files to configure your application (@todo - tutorial).</p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h3><dl><dt><a href="#PluginFilesystemClient">PluginFilesystemClient</a></dt><dd><p>Client-side representation of the soundworks&#39; filesystem plugin.</p></dd><dt><a href="#PluginFilesystemServer">PluginFilesystemServer</a></dt><dd><p>Server-side representation of the soundworks&#39; filesystem plugin.</p></dd></dl><p><a name="PluginFilesystemClient"></a></p><h3 id="pluginfilesystemclient" tabindex="-1">PluginFilesystemClient <a class="header-anchor" href="#pluginfilesystemclient" aria-label="Permalink to &quot;PluginFilesystemClient&quot;">​</a></h3><p>Client-side representation of the soundworks&#39; filesystem plugin.</p><p><strong>Kind</strong>: global class</p><ul><li><a href="#PluginFilesystemClient">PluginFilesystemClient</a><ul><li><a href="#PluginFilesystemClient+getTree">.getTree()</a> ⇒ <code>Object</code></li><li><a href="#PluginFilesystemClient+onUpdate">.onUpdate(callback, [executeListener])</a> ⇒ <code>function</code></li><li><a href="#PluginFilesystemClient+getTreeAsUrlMap">.getTreeAsUrlMap(filterExt, [keepExtension])</a> ⇒ <code>Object</code></li><li><a href="#PluginFilesystemClient+findInTree">.findInTree(path)</a> ⇒ <code>Object</code></li><li><a href="#PluginFilesystemClient+writeFile">.writeFile(filename, data)</a> ⇒ <code>Promise</code></li><li><a href="#PluginFilesystemClient+mkdir">.mkdir(pathname)</a> ⇒ <code>Promise</code></li><li><a href="#PluginFilesystemClient+rename">.rename(oldPath, newPath)</a> ⇒ <code>Promise</code></li><li><a href="#PluginFilesystemClient+rm">.rm(oldPath, newPath)</a> ⇒ <code>Promise</code></li></ul></li></ul><p><a name="PluginFilesystemClient+getTree"></a></p><h4 id="pluginfilesystemclient-gettree-⇒-object" tabindex="-1">pluginFilesystemClient.getTree() ⇒ <code>Object</code> <a class="header-anchor" href="#pluginfilesystemclient-gettree-⇒-object" aria-label="Permalink to &quot;pluginFilesystemClient.getTree() ⇒ &lt;code&gt;Object&lt;/code&gt;&quot;">​</a></h4><p>Return the current filesystem tree.</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemClient"><code>PluginFilesystemClient</code></a><br><a name="PluginFilesystemClient+onUpdate"></a></p><h4 id="pluginfilesystemclient-onupdate-callback-executelistener-⇒-function" tabindex="-1">pluginFilesystemClient.onUpdate(callback, [executeListener]) ⇒ <code>function</code> <a class="header-anchor" href="#pluginfilesystemclient-onupdate-callback-executelistener-⇒-function" aria-label="Permalink to &quot;pluginFilesystemClient.onUpdate(callback, [executeListener]) ⇒ &lt;code&gt;function&lt;/code&gt;&quot;">​</a></h4><p>Register a callback to execute when a file is created, modified or deleted on the underlying directory. The callback will receive the updated <code>tree</code> and the list of <code>events</code> describing the modifications made on the tree.</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemClient"><code>PluginFilesystemClient</code></a><br><strong>Returns</strong>: <code>function</code> - Function that unregister the listener when executed.</p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>callback</td><td><code>function</code></td><td></td><td>Callback function to execute</td></tr><tr><td>[executeListener]</td><td><code>boolean</code></td><td><code>false</code></td><td>If true, execute the given callback immediately.</td></tr></tbody></table><p><a name="PluginFilesystemClient+getTreeAsUrlMap"></a></p><h4 id="pluginfilesystemclient-gettreeasurlmap-filterext-keepextension-⇒-object" tabindex="-1">pluginFilesystemClient.getTreeAsUrlMap(filterExt, [keepExtension]) ⇒ <code>Object</code> <a class="header-anchor" href="#pluginfilesystemclient-gettreeasurlmap-filterext-keepextension-⇒-object" aria-label="Permalink to &quot;pluginFilesystemClient.getTreeAsUrlMap(filterExt, [keepExtension]) ⇒ &lt;code&gt;Object&lt;/code&gt;&quot;">​</a></h4><p>Return the tree as flat map of <code>&lt;filename, url&gt;</code></p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemClient"><code>PluginFilesystemClient</code></a><br><strong>Returns</strong>: <code>Object</code> - Map of <code>&lt;filename, url&gt;</code></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>filterExt</td><td><code>String</code></td><td></td><td>File extension to retrieve in the list</td></tr><tr><td>[keepExtension]</td><td><code>Boolean</code></td><td><code>false</code></td><td>Keep or remove the file extension from the keys</td></tr></tbody></table><p><a name="PluginFilesystemClient+findInTree"></a></p><h4 id="pluginfilesystemclient-findintree-path-⇒-object" tabindex="-1">pluginFilesystemClient.findInTree(path) ⇒ <code>Object</code> <a class="header-anchor" href="#pluginfilesystemclient-findintree-path-⇒-object" aria-label="Permalink to &quot;pluginFilesystemClient.findInTree(path) ⇒ &lt;code&gt;Object&lt;/code&gt;&quot;">​</a></h4><p>Return a node from the tree matching the given path.</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemClient"><code>PluginFilesystemClient</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>path</td><td><code>String</code></td><td>Path of the node to be retrieved.</td></tr></tbody></table><p><a name="PluginFilesystemClient+writeFile"></a></p><h4 id="pluginfilesystemclient-writefile-filename-data-⇒-promise" tabindex="-1">pluginFilesystemClient.writeFile(filename, data) ⇒ <code>Promise</code> <a class="header-anchor" href="#pluginfilesystemclient-writefile-filename-data-⇒-promise" aria-label="Permalink to &quot;pluginFilesystemClient.writeFile(filename, data) ⇒ &lt;code&gt;Promise&lt;/code&gt;&quot;">​</a></h4><p>Write a file</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemClient"><code>PluginFilesystemClient</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>filename</td><td><code>String</code></td><td>Name of the file.</td></tr><tr><td>data</td><td><code>String</code> | <code>Blob</code></td><td>Content of the file.</td></tr></tbody></table><p><a name="PluginFilesystemClient+mkdir"></a></p><h4 id="pluginfilesystemclient-mkdir-pathname-⇒-promise" tabindex="-1">pluginFilesystemClient.mkdir(pathname) ⇒ <code>Promise</code> <a class="header-anchor" href="#pluginfilesystemclient-mkdir-pathname-⇒-promise" aria-label="Permalink to &quot;pluginFilesystemClient.mkdir(pathname) ⇒ &lt;code&gt;Promise&lt;/code&gt;&quot;">​</a></h4><p>Create a directory</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemClient"><code>PluginFilesystemClient</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>pathname</td><td><code>String</code></td><td>Path of the directory.</td></tr></tbody></table><p><a name="PluginFilesystemClient+rename"></a></p><h4 id="pluginfilesystemclient-rename-oldpath-newpath-⇒-promise" tabindex="-1">pluginFilesystemClient.rename(oldPath, newPath) ⇒ <code>Promise</code> <a class="header-anchor" href="#pluginfilesystemclient-rename-oldpath-newpath-⇒-promise" aria-label="Permalink to &quot;pluginFilesystemClient.rename(oldPath, newPath) ⇒ &lt;code&gt;Promise&lt;/code&gt;&quot;">​</a></h4><p>Rename a file or directory</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemClient"><code>PluginFilesystemClient</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>oldPath</td><td><code>String</code></td><td>Current pathname.</td></tr><tr><td>newPath</td><td><code>String</code></td><td>New pathname.</td></tr></tbody></table><p><a name="PluginFilesystemClient+rm"></a></p><h4 id="pluginfilesystemclient-rm-oldpath-newpath-⇒-promise" tabindex="-1">pluginFilesystemClient.rm(oldPath, newPath) ⇒ <code>Promise</code> <a class="header-anchor" href="#pluginfilesystemclient-rm-oldpath-newpath-⇒-promise" aria-label="Permalink to &quot;pluginFilesystemClient.rm(oldPath, newPath) ⇒ &lt;code&gt;Promise&lt;/code&gt;&quot;">​</a></h4><p>Delete a file or directory</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemClient"><code>PluginFilesystemClient</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>oldPath</td><td><code>String</code></td><td>Current pathname.</td></tr><tr><td>newPath</td><td><code>String</code></td><td>New pathname.</td></tr></tbody></table><p><a name="PluginFilesystemServer"></a></p><h3 id="pluginfilesystemserver" tabindex="-1">PluginFilesystemServer <a class="header-anchor" href="#pluginfilesystemserver" aria-label="Permalink to &quot;PluginFilesystemServer&quot;">​</a></h3><p>Server-side representation of the soundworks&#39; filesystem plugin.</p><p><strong>Kind</strong>: global class</p><ul><li><a href="#PluginFilesystemServer">PluginFilesystemServer</a><ul><li><a href="#new_PluginFilesystemServer_new">new PluginFilesystemServer()</a></li><li><a href="#PluginFilesystemServer+switch">.switch(options)</a></li><li><a href="#PluginFilesystemServer+getTree">.getTree()</a> ⇒ <code>Object</code></li><li><a href="#PluginFilesystemServer+onUpdate">.onUpdate(callback, [executeListener])</a> ⇒ <code>function</code></li><li><a href="#PluginFilesystemServer+findInTree">.findInTree(path)</a> ⇒ <code>Object</code></li><li><a href="#PluginFilesystemServer+writeFile">.writeFile(filename, data)</a> ⇒ <code>Promise</code></li><li><a href="#PluginFilesystemServer+mkdir">.mkdir(pathname)</a> ⇒ <code>Promise</code></li><li><a href="#PluginFilesystemServer+rename">.rename(oldPath, newPath)</a> ⇒ <code>Promise</code></li><li><a href="#PluginFilesystemServer+rm">.rm(oldPath, newPath)</a> ⇒ <code>Promise</code></li></ul></li></ul><p><a name="new_PluginFilesystemServer_new"></a></p><h4 id="new-pluginfilesystemserver" tabindex="-1">new PluginFilesystemServer() <a class="header-anchor" href="#new-pluginfilesystemserver" aria-label="Permalink to &quot;new PluginFilesystemServer()&quot;">​</a></h4><p>The constructor should never be called manually. The plugin will be instantiated by soundworks when registered in the <code>pluginManager</code></p><p>Available options:</p><ul><li><code>dirname</code> {String} - directory to watch into</li><li><code>publicPath</code> {String} - (optionnal) optionnal public path for the assets. If set, a route will be added to the router to serve the assets and an <code>url</code> entry will be added to each node of the tree.</li><li><code>depth</code> {String} - (optionnal) Maximum depth to watch in the file structure.</li></ul><p>If no option is given, for example before a user selects a project, the plugin will stay idle until <code>switch</code> is called.</p><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">server.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;filesystem&#39;</span><span style="color:#F8F8F2;">, filesystemPlugin, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  dirname: </span><span style="color:#E6DB74;">&#39;my-dir&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  publicPath: </span><span style="color:#E6DB74;">&#39;assets&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre></div><p><a name="PluginFilesystemServer+switch"></a></p><h4 id="pluginfilesystemserver-switch-options" tabindex="-1">pluginFilesystemServer.switch(options) <a class="header-anchor" href="#pluginfilesystemserver-switch-options" aria-label="Permalink to &quot;pluginFilesystemServer.switch(options)&quot;">​</a></h4><p>Switch the filesystem to a new directory, e.g. to change project while keeping the same plugin and related logic at hand.</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemServer"><code>PluginFilesystemServer</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>options</td><td><code>Object</code></td><td></td><td></td></tr><tr><td>[options.dirname]</td><td><code>String</code></td><td><code></code></td><td>directory to watch, plugin is idle if null</td></tr><tr><td>[options.publicPath]</td><td><code>String</code></td><td><code></code></td><td>optionnal public path for the assets. If set, a route will be added to the router to serve the assets and an <code>url</code> entry will be added to each node of the tree.</td></tr></tbody></table><p><a name="PluginFilesystemServer+getTree"></a></p><h4 id="pluginfilesystemserver-gettree-⇒-object" tabindex="-1">pluginFilesystemServer.getTree() ⇒ <code>Object</code> <a class="header-anchor" href="#pluginfilesystemserver-gettree-⇒-object" aria-label="Permalink to &quot;pluginFilesystemServer.getTree() ⇒ &lt;code&gt;Object&lt;/code&gt;&quot;">​</a></h4><p>Return the current filesystem tree.</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemServer"><code>PluginFilesystemServer</code></a><br><a name="PluginFilesystemServer+onUpdate"></a></p><h4 id="pluginfilesystemserver-onupdate-callback-executelistener-⇒-function" tabindex="-1">pluginFilesystemServer.onUpdate(callback, [executeListener]) ⇒ <code>function</code> <a class="header-anchor" href="#pluginfilesystemserver-onupdate-callback-executelistener-⇒-function" aria-label="Permalink to &quot;pluginFilesystemServer.onUpdate(callback, [executeListener]) ⇒ &lt;code&gt;function&lt;/code&gt;&quot;">​</a></h4><p>Register a callback to execute when a file is created, modified or deleted on the underlying directory. The callback will receive the updated <code>tree</code> and the list of <code>events</code> describing the modifications made on the tree.</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemServer"><code>PluginFilesystemServer</code></a><br><strong>Returns</strong>: <code>function</code> - Function that unregister the listener when executed.</p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>callback</td><td><code>function</code></td><td></td><td>Callback function to execute</td></tr><tr><td>[executeListener]</td><td><code>boolean</code></td><td><code>false</code></td><td>If true, execute the given callback immediately.</td></tr></tbody></table><p><a name="PluginFilesystemServer+findInTree"></a></p><h4 id="pluginfilesystemserver-findintree-path-⇒-object" tabindex="-1">pluginFilesystemServer.findInTree(path) ⇒ <code>Object</code> <a class="header-anchor" href="#pluginfilesystemserver-findintree-path-⇒-object" aria-label="Permalink to &quot;pluginFilesystemServer.findInTree(path) ⇒ &lt;code&gt;Object&lt;/code&gt;&quot;">​</a></h4><p>Return a node from the tree matching the given path.</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemServer"><code>PluginFilesystemServer</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>path</td><td><code>String</code></td><td>path of the node to be retrieved</td></tr></tbody></table><p><a name="PluginFilesystemServer+writeFile"></a></p><h4 id="pluginfilesystemserver-writefile-filename-data-⇒-promise" tabindex="-1">pluginFilesystemServer.writeFile(filename, data) ⇒ <code>Promise</code> <a class="header-anchor" href="#pluginfilesystemserver-writefile-filename-data-⇒-promise" aria-label="Permalink to &quot;pluginFilesystemServer.writeFile(filename, data) ⇒ &lt;code&gt;Promise&lt;/code&gt;&quot;">​</a></h4><p>Write a file</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemServer"><code>PluginFilesystemServer</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>filename</td><td><code>String</code></td><td>Name of the file.</td></tr><tr><td>data</td><td><code>String</code> | <code>Blob</code></td><td>Content of the file.</td></tr></tbody></table><p><a name="PluginFilesystemServer+mkdir"></a></p><h4 id="pluginfilesystemserver-mkdir-pathname-⇒-promise" tabindex="-1">pluginFilesystemServer.mkdir(pathname) ⇒ <code>Promise</code> <a class="header-anchor" href="#pluginfilesystemserver-mkdir-pathname-⇒-promise" aria-label="Permalink to &quot;pluginFilesystemServer.mkdir(pathname) ⇒ &lt;code&gt;Promise&lt;/code&gt;&quot;">​</a></h4><p>Create a directory</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemServer"><code>PluginFilesystemServer</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>pathname</td><td><code>String</code></td><td>Path of the directory.</td></tr></tbody></table><p><a name="PluginFilesystemServer+rename"></a></p><h4 id="pluginfilesystemserver-rename-oldpath-newpath-⇒-promise" tabindex="-1">pluginFilesystemServer.rename(oldPath, newPath) ⇒ <code>Promise</code> <a class="header-anchor" href="#pluginfilesystemserver-rename-oldpath-newpath-⇒-promise" aria-label="Permalink to &quot;pluginFilesystemServer.rename(oldPath, newPath) ⇒ &lt;code&gt;Promise&lt;/code&gt;&quot;">​</a></h4><p>Rename a file or directory</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemServer"><code>PluginFilesystemServer</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>oldPath</td><td><code>String</code></td><td>Current pathname.</td></tr><tr><td>newPath</td><td><code>String</code></td><td>New pathname.</td></tr></tbody></table><p><a name="PluginFilesystemServer+rm"></a></p><h4 id="pluginfilesystemserver-rm-oldpath-newpath-⇒-promise" tabindex="-1">pluginFilesystemServer.rm(oldPath, newPath) ⇒ <code>Promise</code> <a class="header-anchor" href="#pluginfilesystemserver-rm-oldpath-newpath-⇒-promise" aria-label="Permalink to &quot;pluginFilesystemServer.rm(oldPath, newPath) ⇒ &lt;code&gt;Promise&lt;/code&gt;&quot;">​</a></h4><p>Delete a file or directory</p><p><strong>Kind</strong>: instance method of <a href="#PluginFilesystemServer"><code>PluginFilesystemServer</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>oldPath</td><td><code>String</code></td><td>Current pathname.</td></tr><tr><td>newPath</td><td><code>String</code></td><td>New pathname.</td></tr></tbody></table><h2 id="credits" tabindex="-1">Credits <a class="header-anchor" href="#credits" aria-label="Permalink to &quot;Credits&quot;">​</a></h2><p><a href="https://soundworks.dev/credits.html" target="_blank" rel="noreferrer">https://soundworks.dev/credits.html</a></p><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-label="Permalink to &quot;License&quot;">​</a></h2><p><a href="./LICENSE.html">BSD-3-Clause</a></p>`,122),i=[n];function o(r,d,p,c,h,m){return t(),s("div",null,i)}const g=e(l,[["render",o]]);export{y as __pageData,g as default};
