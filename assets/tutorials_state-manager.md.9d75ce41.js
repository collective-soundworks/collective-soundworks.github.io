import{_ as s,c as a,o as e,a as n}from"./app.436be996.js";const g=JSON.parse('{"title":"StateManager Tutorial","description":"","frontmatter":{},"headers":[{"level":2,"title":"Table of Content","slug":"table-of-content","link":"#table-of-content","children":[]},{"level":2,"title":"Declaring Schemas","slug":"declaring-schemas","link":"#declaring-schemas","children":[]},{"level":2,"title":"Registering Schemas","slug":"registering-schemas","link":"#registering-schemas","children":[]},{"level":2,"title":"Creating States","slug":"creating-states","link":"#creating-states","children":[]},{"level":2,"title":"Attaching to States","slug":"attaching-to-states","link":"#attaching-to-states","children":[]},{"level":2,"title":"Observing the Creation of States on the Network","slug":"observing-the-creation-of-states-on-the-network","link":"#observing-the-creation-of-states-on-the-network","children":[]},{"level":2,"title":"Updating Values and Subscribing to Updates","slug":"updating-values-and-subscribing-to-updates","link":"#updating-values-and-subscribing-to-updates","children":[]}],"relativePath":"tutorials/state-manager.md"}'),l={name:"tutorials/state-manager.md"},t=n(`<h1 id="statemanager-tutorial" tabindex="-1">StateManager Tutorial <a class="header-anchor" href="#statemanager-tutorial" aria-hidden="true">#</a></h1><blockquote><p>Learn how to use the soundworks&#39; <code>stateManager</code> to:</p><ul><li>create shared global and local states</li><li>remote control and monitor clients of your application</li></ul><p>Note that the <code>stateManager</code> component can simplifies the development of applications by abstracting in large parts network communications and routing.</p></blockquote><h2 id="table-of-content" tabindex="-1">Table of Content <a class="header-anchor" href="#table-of-content" aria-hidden="true">#</a></h2><nav class="table-of-contents"><ul><li><a href="#table-of-content">Table of Content</a></li><li><a href="#declaring-schemas">Declaring Schemas</a></li><li><a href="#registering-schemas">Registering Schemas</a></li><li><a href="#creating-states">Creating States</a></li><li><a href="#attaching-to-states">Attaching to States</a></li><li><a href="#observing-the-creation-of-states-on-the-network">Observing the Creation of States on the Network</a></li><li><a href="#updating-values-and-subscribing-to-updates">Updating Values and Subscribing to Updates</a></li></ul></nav><div class="warning custom-block"><p class="custom-block-title">@todos</p><ul><li>make a clean code example</li><li>review end of tutorial</li></ul></div><h2 id="declaring-schemas" tabindex="-1">Declaring Schemas <a class="header-anchor" href="#declaring-schemas" aria-hidden="true">#</a></h2><p>The <code>stateManager</code> component makes use of schemas that declare a set of attributes and their properties (you can think of it has the schema of a database table). The schema syntax follows the format described in <a href="https://github.com/ircam-jstools/parameters" target="_blank" rel="noreferrer">https://github.com/ircam-jstools/parameters</a>.</p><p>In this application two schemas are declared (cf. <code>src/server/schemas/</code>, note that the <code>schema</code> directory is not mandatory but looks like a good practice to keep things clean).</p><ul><li>the <code>globals</code> schema (cf. <code>src/server/schemas/globals.js</code>) is meant to declare a state that will be created by the server, and will thus be unique across the whole application. Every client will be able to attach to the created state, but we guarantee that this state will be kept identical across all of the clients. Here, the schema declares a global <code>master</code> volume and a <code>mute</code> flag.</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#88846F;">// \`src/server/schemas/globals.js\`</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// master volume in dB [-60, 6]</span></span>
<span class="line"><span style="color:#F8F8F2;">  master: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: </span><span style="color:#E6DB74;">&#39;integer&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    min: </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    max: </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    step: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    default: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// mute [true, false]</span></span>
<span class="line"><span style="color:#F8F8F2;">  mute: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    default: </span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre></div><ul><li>the <code>player</code> schema is dedicated to describing the state of a single player client, meaning that each player will instantiate its own instance of the schema. Other clients (typically a controller) can attach to the player&#39;s state to monitor and remotely control the client. Here the schema declares two oscillator parameters: <code>type</code> and <code>frequency</code></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#88846F;">// \`src/server/schemas/player.js\`</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// dummy oscillator params</span></span>
<span class="line"><span style="color:#F8F8F2;">  type: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: </span><span style="color:#E6DB74;">&#39;enum&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    list: [</span><span style="color:#E6DB74;">&#39;sine&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;square&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;sawtooth&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;triangle&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    default: </span><span style="color:#E6DB74;">&#39;sine&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  frequency: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    type: </span><span style="color:#E6DB74;">&#39;integer&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    min: </span><span style="color:#AE81FF;">50</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    max: </span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    default: </span><span style="color:#AE81FF;">440</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="registering-schemas" tabindex="-1">Registering Schemas <a class="header-anchor" href="#registering-schemas" aria-hidden="true">#</a></h2><ul><li><a href="http://collective-soundworks.github.io/soundworks/server.SharedStateManagerServer.html#registerSchema" target="_blank" rel="noreferrer">server.SharedStateManagerServer#registerSchema</a></li></ul><p>Once the schemas have been declared, we must register them server-side into the soundworks&#39; <code>stateManager</code>. Indeed, the server keeps a local instance of every state created in the application and acts as the only source of ground truth.</p><p>A good practice is to do that after the server initialization (<code>await server.init(...)</code>, so that the state manager is ready to be used, but before the server start (<code>await server.start()</code>), so that we accept client connections when everything is properly configured.</p><p>In order to register the schemas, you have to follow the two following steps:</p><ol><li>import the files where the schemas are declared:</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#88846F;">// src/server/index.js (line 15-16)</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> globalsSchema </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./schemas/globals&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> playerSchema </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./schemas/player&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>register the schema to the <code>stateManager</code>:</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#88846F;">// src/server/index.js (line 59-60)</span></span>
<span class="line"><span style="color:#F8F8F2;">server.stateManager.</span><span style="color:#A6E22E;">registerSchema</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">, globalsSchema);</span></span>
<span class="line"><span style="color:#F8F8F2;">server.stateManager.</span><span style="color:#A6E22E;">registerSchema</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;player&#39;</span><span style="color:#F8F8F2;">, playerSchema);</span></span>
<span class="line"></span></code></pre></div><h2 id="creating-states" tabindex="-1">Creating States <a class="header-anchor" href="#creating-states" aria-hidden="true">#</a></h2><ul><li><a href="http://collective-soundworks.github.io/soundworks/server.SharedStateManagerServer.html#create" target="_blank" rel="noreferrer">server.SharedStateManagerServer#create</a></li><li><a href="http://collective-soundworks.github.io/soundworks/client.SharedStateManagerClient.html#create" target="_blank" rel="noreferrer">client.SharedStateManagerClient#create</a></li></ul><p>Once schemas are registered, they can be instantiated by any server or clients <code>stateManager</code> (<em>note: internally the <code>server.stateManager</code> is itself a client of the shared state system, except for <code>registerState</code> method, its API is thus the same as the client side API</em>).</p><p>Typically, creating a state server-side will allow to share a common state to all the clients of the application. While creating a state client side will create a novel instance of the state for every client, simplifying remote control and monitoring.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#88846F;">// server-side</span></span>
<span class="line"><span style="color:#66D9EF;">const</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.stateManager.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(schemaName, [defaultValues]);</span></span>
<span class="line"><span style="color:#88846F;">// or client-side</span></span>
<span class="line"><span style="color:#66D9EF;">const</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(schemaName, [defaultValues]);</span></span>
<span class="line"></span></code></pre></div><p>In the example application the <code>globals</code> state is created by the server:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#88846F;">// src/server/index.js (line 62)</span></span>
<span class="line"><span style="color:#66D9EF;">const</span><span style="color:#F8F8F2;"> globalsState </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.stateManager.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globalsState:&#39;</span><span style="color:#F8F8F2;">, globalsState.</span><span style="color:#A6E22E;">getValues</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#88846F;">// &gt; globalsState: { master: 0, mute: false }</span></span>
<span class="line"></span></code></pre></div><p>While each player creates its own instance of the <code>player</code> schema:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#88846F;">// src/clients/player/PlayerExperience.js (line 22-24)</span></span>
<span class="line"><span style="color:#66D9EF;">const</span><span style="color:#F8F8F2;"> playerState </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.client.stateManager.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;player&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  frequency: Math.</span><span style="color:#A6E22E;">round</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">50</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">random</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">950</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;playerState:&#39;</span><span style="color:#F8F8F2;">, playerState.</span><span style="color:#A6E22E;">getValues</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#88846F;">// &gt; playerState: {type: &quot;sine&quot;, frequency: 513}</span></span>
<span class="line"></span></code></pre></div><p>As we want every client connecting to play a different frequency, we initialize the state with a random value.</p><h2 id="attaching-to-states" tabindex="-1">Attaching to States <a class="header-anchor" href="#attaching-to-states" aria-hidden="true">#</a></h2><ul><li><a href="http://collective-soundworks.github.io/soundworks/server.SharedStateManagerServer.html#attach" target="_blank" rel="noreferrer">server.SharedStateManagerServer#attach</a></li><li><a href="http://collective-soundworks.github.io/soundworks/client.SharedStateManagerClient.html#attach" target="_blank" rel="noreferrer">client.SharedStateManagerClient#attach</a></li></ul><p>Any node of the network (client or server) can attach to a state created by another node.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#88846F;">// on server-side</span></span>
<span class="line"><span style="color:#66D9EF;">const</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(schemaName, [stateId]);</span></span>
<span class="line"><span style="color:#88846F;">// or client-side</span></span>
<span class="line"><span style="color:#66D9EF;">const</span><span style="color:#F8F8F2;"> state </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(schemaName, [stateId]);</span></span>
<span class="line"></span></code></pre></div><p>In our example, we want every player be informed of the current values of the <code>globalsState</code> created by the server, the player clients must thus <code>attach</code> to this state.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#88846F;">// src/clients/player/PlayerExperience.js (line 22-24)</span></span>
<span class="line"><span style="color:#66D9EF;">const</span><span style="color:#F8F8F2;"> globalsState </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globalsState:&#39;</span><span style="color:#F8F8F2;">, globalsState.</span><span style="color:#A6E22E;">getValues</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#88846F;">// &gt; globalsState: { master: 0, mute: false }</span></span>
<span class="line"></span></code></pre></div><p>Every player client is now attached to the <code>globals</code> state created by the server and will be notified if any update occur (more on that in <em>Subscribing to updates and updating states</em>).</p><h2 id="observing-the-creation-of-states-on-the-network" tabindex="-1">Observing the Creation of States on the Network <a class="header-anchor" href="#observing-the-creation-of-states-on-the-network" aria-hidden="true">#</a></h2><ul><li><a href="http://collective-soundworks.github.io/soundworks/server.SharedStateManagerServer.html#observe" target="_blank" rel="noreferrer">server.SharedStateManagerServer#observe</a></li><li><a href="http://collective-soundworks.github.io/soundworks/client.SharedStateManagerClient.html#observe" target="_blank" rel="noreferrer">client.SharedStateManagerClient#observe</a></li><li><a href="http://collective-soundworks.github.io/soundworks/client.SharedStateManagerClient.html#~observeCallback" target="_blank" rel="noreferrer">client.SharedStateManagerClient~observeCallback</a></li></ul><p>As states can be dynamically created by any node, we need a way to monitor the newly created state in the application (e.g. when a <code>player</code> client connect to the application, the <code>controller</code> client wants to be notified so it can attach to the newly created state and monitor or control it).</p><p>This can be achived using the <code>observe</code> method :</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#88846F;">// on server-side</span></span>
<span class="line"><span style="color:#F8F8F2;">server.stateManager.</span><span style="color:#A6E22E;">observe</span><span style="color:#F8F8F2;">(observeCallback);</span></span>
<span class="line"><span style="color:#88846F;">// or client-side</span></span>
<span class="line"><span style="color:#F8F8F2;">client.stateManager.</span><span style="color:#A6E22E;">observe</span><span style="color:#F8F8F2;">(observeCallback);</span></span>
<span class="line"></span></code></pre></div><p>In our example, the controller wants to track every <code>player</code> states created by <code>player</code> clients, to be able to monitor and control them remotely, it thus <code>observe</code> and attach to the state when notified:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#88846F;">// src/clients/controller/ControllerExperience (line 23)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// create a list to store the player states</span></span>
<span class="line"><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerStates </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.client.stateManager.</span><span style="color:#A6E22E;">observe</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">schemaName</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">stateId</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">nodeId</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;arguments:&#39;</span><span style="color:#F8F8F2;">, schemaName, stateId, nodeId);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// the callback is called twice, for the global and player states</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// &gt; arguments: &#39;globals&#39; 0 -1</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// &gt; arguments: &#39;player&#39; 2 1</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;">(schemaName) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">case</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;player&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;">const</span><span style="color:#F8F8F2;"> playerState </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(schemaName, stateId);</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;playerState:&#39;</span><span style="color:#F8F8F2;">, playerState.</span><span style="color:#A6E22E;">getValues</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// &gt; playerState: {type: &quot;sine&quot;, frequency: 513}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// logic to do when the state is deleted</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// (e.g. when the player disconnects)</span></span>
<span class="line"><span style="color:#F8F8F2;">      playerState.</span><span style="color:#A6E22E;">onDetach</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// clean things</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerStates.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(playerState);</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// store the player state into a list</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.playerStates.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(playerState);</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><h2 id="updating-values-and-subscribing-to-updates" tabindex="-1">Updating Values and Subscribing to Updates <a class="header-anchor" href="#updating-values-and-subscribing-to-updates" aria-hidden="true">#</a></h2><p>Once we have a local instance of state (through <code>create</code> or <code>attach</code>), we need to be notified of any change that may occur and to be able to change its values.</p><p>The <code>set</code> method allows for updating the values of a state</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#F8F8F2;">state.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(updates);</span></span>
<span class="line"></span></code></pre></div><ul><li><a href="http://collective-soundworks.github.io/soundworks/common.SharedState.html#set" target="_blank" rel="noreferrer">common.SharedState#set</a></li></ul><p>In our example, the controller, once attached to a player state will update the <code>frequency</code> to a new random value every second (practically, this does not make a lot of sense, but for now it explains the concept...):</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#88846F;">// src/clients/controller/ControllerExperience (line 33)</span></span>
<span class="line"><span style="color:#66D9EF;">const</span><span style="color:#F8F8F2;"> intervalId </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">setInterval</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;">const</span><span style="color:#F8F8F2;"> frequency </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">round</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">50</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">random</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">950</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> playerState.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">({ frequency });</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p><em>Note: we wouldn&#39;t implement this kind of logic in a real world situation. Indeed, if we open 2 controllers each one will set a new value to the frequency every second</em></p><p>The <code>subscribe</code> method allows to be notified when an update occur on the state:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#F8F8F2;">state.</span><span style="color:#A6E22E;">subscribe</span><span style="color:#F8F8F2;">(callback);</span></span>
<span class="line"></span></code></pre></div><ul><li><a href="http://collective-soundworks.github.io/soundworks/common.SharedState.html#subscribe" target="_blank" rel="noreferrer">common.SharedState#subscribe</a></li></ul><p>In our example, the player can <code>subscribe</code> to the updates triggered by the controller and react accordingly. The callback is thus called every second (if we ignore the network latency):</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#88846F;">// src/clients/controller/ControllerExperience (line 30)</span></span>
<span class="line"><span style="color:#F8F8F2;">playerState.</span><span style="color:#A6E22E;">subscribe</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">updates</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;updates:&#39;</span><span style="color:#F8F8F2;">, updates);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// updates: { frequency: 288 }</span></span>
<span class="line"><span style="color:#88846F;">// updates: { frequency: 965 }</span></span>
<span class="line"><span style="color:#88846F;">// updates: { frequency: 540 }</span></span>
<span class="line"><span style="color:#88846F;">// updates: { frequency: 120 }</span></span>
<span class="line"><span style="color:#88846F;">// updates: { frequency: 678 }</span></span>
<span class="line"><span style="color:#88846F;">// ...</span></span>
<span class="line"></span></code></pre></div><p>The same logic could be done with the <code>globals</code> state, at the difference that every player client would be notified of the update.</p>`,59),o=[t];function p(c,r,i,F,y,d){return e(),a("div",null,o)}const u=s(l,[["render",p]]);export{g as __pageData,u as default};
