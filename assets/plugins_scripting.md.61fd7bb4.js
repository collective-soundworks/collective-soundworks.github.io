import{_ as e,o as t,c as a,Q as s}from"./chunks/framework.22f5e90d.js";const F=JSON.parse('{"title":"soundworks | plugin scripting","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/scripting.md","filePath":"plugins/scripting.md"}'),n={name:"plugins/scripting.md"},r=s(`<h1 id="soundworks-plugin-scripting" tabindex="-1">soundworks | plugin scripting <a class="header-anchor" href="#soundworks-plugin-scripting" aria-label="Permalink to &quot;soundworks | plugin scripting&quot;">​</a></h1><p><a href="https://badge.fury.io/js/@soundworks%2Fplugin-scripting" target="_blank" rel="noreferrer"><img src="https://badge.fury.io/js/@soundworks%2Fplugin-scripting.svg" alt="npm version"></a></p><p><a href="https://soundworks.dev" target="_blank" rel="noreferrer"><code>soundworks</code></a> plugin for runtime distributed scripting.</p><h2 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of Contents&quot;">​</a></h2><ul><li><a href="#installation">Installation</a></li><li><a href="#usage">Usage</a><ul><li><a href="#server">Server</a></li><li><a href="#client">Client</a></li><li><a href="#notes">Notes</a></li></ul></li><li><a href="#api">API</a><ul><li><a href="#classes">Classes</a></li><li><a href="#pluginscriptingserver">PluginScriptingServer</a></li><li><a href="#sharedscript">SharedScript</a></li></ul></li><li><a href="#development-notes">Development Notes</a></li><li><a href="#credits">Credits</a></li><li><a href="#license">License</a></li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">@soundworks/plugin-scripting</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--save</span></span></code></pre></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><h3 id="server" tabindex="-1">Server <a class="header-anchor" href="#server" aria-label="Permalink to &quot;Server&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// src/server/index.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Server } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/core/server.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> pluginScripting </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/plugin-scripting/server.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> server </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Server</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"><span style="color:#88846F;">// register the plugin with an optionnal dirname</span></span>
<span class="line"><span style="color:#F8F8F2;">server.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">, pluginScripting, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  dirname: </span><span style="color:#E6DB74;">&#39;my-script&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">// use the plugin once the server is started</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> scripting </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.pluginManager.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><p>Given that there is a file <code>my-constants.js</code> in the watched <code>my-script</code> directory:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// my-script/my-constants.js</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> answer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">;</span></span></code></pre></div><h3 id="client" tabindex="-1">Client <a class="header-anchor" href="#client" aria-label="Permalink to &quot;Client&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// src/client/**/index.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Client } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/core/client.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> pluginScripting </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/plugin-scripting/client.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> client </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Client</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"><span style="color:#88846F;">// register the plugin</span></span>
<span class="line"><span style="color:#F8F8F2;">client.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">, pluginScripting);</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">// use the plugin once the client is started</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> scripting </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.pluginManager.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> script </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> scripting.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;my-constants&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mod </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> script.</span><span style="color:#A6E22E;">import</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(mod.answer);</span></span>
<span class="line"><span style="color:#88846F;">// &gt; 42</span></span></code></pre></div><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h3><h4 id="where-do-the-scripts-live" tabindex="-1">Where do the scripts live <a class="header-anchor" href="#where-do-the-scripts-live" aria-label="Permalink to &quot;Where do the scripts live&quot;">​</a></h4><p>The shared scripts are stored in the file system as raw Javascript files located in the directory defined on the server side configuration of the plugin (cf. <code>dirname</code> option).</p><p>This is the responsibility of the code consuming the shared scripts to define the API that the scripts should expose.</p><h4 id="limitations" tabindex="-1">Limitations <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;Limitations&quot;">​</a></h4><p>The scripts are simple JavaScript modules that are re-bundled using <code>esbuild</code> each time their content is modified. As such, they can import installed dependencies (i.e. <code>node_modules</code>) or import other scripts. However, using such bundle leads to a restriction in Node.js clients, that can&#39;t import native addons directly (in such case you should inject the dependency into the script at runtime). This might change in the future as dynamic <code>import</code>/<code>require</code> of ES modules is more stable (cf. <a href="https://github.com/nodejs/help/issues/2751" target="_blank" rel="noreferrer">https://github.com/nodejs/help/issues/2751</a>).</p><h4 id="creating-updating-deleting-scripts" tabindex="-1">Creating / updating / deleting scripts <a class="header-anchor" href="#creating-updating-deleting-scripts" aria-label="Permalink to &quot;Creating / updating / deleting scripts&quot;">​</a></h4><p>Internally the <code>scripting</code> plugin relies on the <a href="https://soundworks.dev/plugins/filesystem.html" target="_blank" rel="noreferrer"><code>@soundworks/plugin-filesystem</code></a> plugin, which should be use to make any modifications in the script directory:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// register and get the scripting plugin</span></span>
<span class="line"><span style="color:#F8F8F2;">server.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">, pluginScripting, { dirname: </span><span style="color:#E6DB74;">&#39;my-script&#39;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> scripting </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.pluginManager.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">// create a new script in the &#39;my-script&#39; directory using the scripting reltated filesystem</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> code </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">\`export function add(a, b) { return a + b }\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> scripting.filesystem.</span><span style="color:#A6E22E;">writeFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;add.js&#39;</span><span style="color:#F8F8F2;">, code);</span></span></code></pre></div><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h3><dl><dt><a href="#PluginScriptingServer">PluginScriptingServer</a></dt><dd><p>Server-side representation of the soundworks&#39; scripting plugin.</p></dd><dt><a href="#SharedScript">SharedScript</a></dt><dd><p>A SharedScript can be distributed amongst different clients and modified at runtime. The script source is stored directly in the filestem, see <code>dirname</code> option of the server-side plugin.</p><p>A Shared script cannot be instatiated manually, it is retrieved by calling the client&#39;s or server <code>PluginScripting.attach</code> method.</p></dd></dl><p><a name="PluginScriptingServer"></a></p><h3 id="pluginscriptingserver" tabindex="-1">PluginScriptingServer <a class="header-anchor" href="#pluginscriptingserver" aria-label="Permalink to &quot;PluginScriptingServer&quot;">​</a></h3><p>Server-side representation of the soundworks&#39; scripting plugin.</p><p><strong>Kind</strong>: global class</p><ul><li><a href="#PluginScriptingServer">PluginScriptingServer</a><ul><li><a href="#new_PluginScriptingServer_new">new PluginScriptingServer()</a></li><li><a href="#PluginScriptingServer+filesystem">.filesystem</a></li><li><a href="#PluginScriptingServer+getList">.getList()</a> ⇒ <code>Array</code></li><li><a href="#PluginScriptingServer+getCollection">.getCollection()</a> ⇒ <code>Promise.&lt;SharedStateCollection&gt;</code></li><li><a href="#PluginScriptingServer+setGlobalScriptingContext">.setGlobalScriptingContext(ctx)</a></li><li><a href="#PluginScriptingServer+onUpdate">.onUpdate(callback, [executeListener])</a> ⇒ <code>function</code></li><li><a href="#PluginScriptingServer+switch">.switch(dirname)</a></li><li><a href="#PluginScriptingServer+attach">.attach(name)</a> ⇒ <code>Promise</code></li></ul></li></ul><p><a name="new_PluginScriptingServer_new"></a></p><h4 id="new-pluginscriptingserver" tabindex="-1">new PluginScriptingServer() <a class="header-anchor" href="#new-pluginscriptingserver" aria-label="Permalink to &quot;new PluginScriptingServer()&quot;">​</a></h4><p>The constructor should never be called manually. The plugin will be instantiated by soundworks when registered in the <code>pluginManager</code></p><p>Available options:</p><ul><li><code>dirname</code> {String} - directory in which the script files are located</li></ul><p>If no option is given, for example before a user selects a project, the plugin will stay idle until <code>switch</code> is called.</p><p><strong>Example</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">server.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">, scriptingPlugin, { dirname })</span></span></code></pre></div><p><a name="PluginScriptingServer+filesystem"></a></p><h4 id="pluginscriptingserver-filesystem" tabindex="-1">pluginScriptingServer.filesystem <a class="header-anchor" href="#pluginscriptingserver-filesystem" aria-label="Permalink to &quot;pluginScriptingServer.filesystem&quot;">​</a></h4><p>Instance of the underlying filesystem plugin.</p><p><strong>Kind</strong>: instance property of <a href="#PluginScriptingServer"><code>PluginScriptingServer</code></a><br><a name="PluginScriptingServer+getList"></a></p><h4 id="pluginscriptingserver-getlist-⇒-array" tabindex="-1">pluginScriptingServer.getList() ⇒ <code>Array</code> <a class="header-anchor" href="#pluginscriptingserver-getlist-⇒-array" aria-label="Permalink to &quot;pluginScriptingServer.getList() ⇒ &lt;code&gt;Array&lt;/code&gt;&quot;">​</a></h4><p>Returns the list of all available scripts.</p><p><strong>Kind</strong>: instance method of <a href="#PluginScriptingServer"><code>PluginScriptingServer</code></a><br><a name="PluginScriptingServer+getCollection"></a></p><h4 id="pluginscriptingserver-getcollection-⇒-promise-sharedstatecollection" tabindex="-1">pluginScriptingServer.getCollection() ⇒ <code>Promise.&lt;SharedStateCollection&gt;</code> <a class="header-anchor" href="#pluginscriptingserver-getcollection-⇒-promise-sharedstatecollection" aria-label="Permalink to &quot;pluginScriptingServer.getCollection() ⇒ &lt;code&gt;Promise.&amp;lt;SharedStateCollection&amp;gt;&lt;/code&gt;&quot;">​</a></h4><p>Return the SharedStateCollection of all the scripts underlying share states. Provided for build and error monitoring purposes. If you want a full featured Script instance, see <code>attach</code> instead.</p><p><strong>Kind</strong>: instance method of <a href="#PluginScriptingServer"><code>PluginScriptingServer</code></a><br><a name="PluginScriptingServer+setGlobalScriptingContext"></a></p><h4 id="pluginscriptingserver-setglobalscriptingcontext-ctx" tabindex="-1">pluginScriptingServer.setGlobalScriptingContext(ctx) <a class="header-anchor" href="#pluginscriptingserver-setglobalscriptingcontext-ctx" aria-label="Permalink to &quot;pluginScriptingServer.setGlobalScriptingContext(ctx)&quot;">​</a></h4><p>Registers a global context object to be used in scripts. Note that the context is store globally, so several scripting plugins running in parallel will share the same underlying object. The global <code>getGlobalScriptingContext</code> function will allow to retrieve the given object from within scripts.</p><p><strong>Kind</strong>: instance method of <a href="#PluginScriptingServer"><code>PluginScriptingServer</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ctx</td><td><code>Object</code></td><td>Object to store in global context</td></tr></tbody></table><p><a name="PluginScriptingServer+onUpdate"></a></p><h4 id="pluginscriptingserver-onupdate-callback-executelistener-⇒-function" tabindex="-1">pluginScriptingServer.onUpdate(callback, [executeListener]) ⇒ <code>function</code> <a class="header-anchor" href="#pluginscriptingserver-onupdate-callback-executelistener-⇒-function" aria-label="Permalink to &quot;pluginScriptingServer.onUpdate(callback, [executeListener]) ⇒ &lt;code&gt;function&lt;/code&gt;&quot;">​</a></h4><p>Register callback to execute when a script is created or deleted.</p><p><strong>Kind</strong>: instance method of <a href="#PluginScriptingServer"><code>PluginScriptingServer</code></a><br><strong>Returns</strong>: <code>function</code> - Function that unregister the listener when executed.</p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>callback</td><td><code>function</code></td><td></td><td>Callback function to execute</td></tr><tr><td>[executeListener]</td><td><code>boolean</code></td><td><code>false</code></td><td>If true, execute the given callback immediately.</td></tr></tbody></table><p><a name="PluginScriptingServer+switch"></a></p><h4 id="pluginscriptingserver-switch-dirname" tabindex="-1">pluginScriptingServer.switch(dirname) <a class="header-anchor" href="#pluginscriptingserver-switch-dirname" aria-label="Permalink to &quot;pluginScriptingServer.switch(dirname)&quot;">​</a></h4><p>Switch the plugin to watch and use another directory</p><p><strong>Kind</strong>: instance method of <a href="#PluginScriptingServer"><code>PluginScriptingServer</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>dirname</td><td><code>String</code> | <code>Object</code></td><td>Path to the new directory. As a convenience to match the plugin filesystem API, an object containing the &#39;dirname&#39; key can also be passed</td></tr></tbody></table><p><a name="PluginScriptingServer+attach"></a></p><h4 id="pluginscriptingserver-attach-name-⇒-promise" tabindex="-1">pluginScriptingServer.attach(name) ⇒ <code>Promise</code> <a class="header-anchor" href="#pluginscriptingserver-attach-name-⇒-promise" aria-label="Permalink to &quot;pluginScriptingServer.attach(name) ⇒ &lt;code&gt;Promise&lt;/code&gt;&quot;">​</a></h4><p>Attach to a script.</p><p><strong>Kind</strong>: instance method of <a href="#PluginScriptingServer"><code>PluginScriptingServer</code></a><br><strong>Returns</strong>: <code>Promise</code> - Promise that resolves on a new Script instance.</p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td><code>string</code></td><td>Name of the script</td></tr></tbody></table><p><a name="SharedScript"></a></p><h3 id="sharedscript" tabindex="-1">SharedScript <a class="header-anchor" href="#sharedscript" aria-label="Permalink to &quot;SharedScript&quot;">​</a></h3><p>A SharedScript can be distributed amongst different clients and modified at runtime. The script source is stored directly in the filestem, see <code>dirname</code> option of the server-side plugin.</p><p>A Shared script cannot be instatiated manually, it is retrieved by calling the client&#39;s or server <code>PluginScripting.attach</code> method.</p><p><strong>Kind</strong>: global class</p><ul><li><a href="#SharedScript">SharedScript</a><ul><li><a href="#SharedScript+name">.name</a> : <code>string</code></li><li><a href="#SharedScript+filename">.filename</a> : <code>string</code></li><li><a href="#SharedScript+buildError">.buildError</a> : <code>string</code></li><li><a href="#SharedScript+runtimeError">.runtimeError</a> : <code>string</code></li><li><a href="#SharedScript+import">.import()</a> ⇒ <code>Promise</code></li><li><a href="#SharedScript+reportRuntimeError">.reportRuntimeError(err)</a></li><li><a href="#SharedScript+detach">.detach()</a></li><li><a href="#SharedScript+onUpdate">.onUpdate(callback, [executeListener])</a> ⇒ <code>function</code></li><li><a href="#SharedScript+onDetach">.onDetach(callback)</a></li></ul></li></ul><p><a name="SharedScript+name"></a></p><h4 id="sharedscript-name-string" tabindex="-1">sharedScript.name : <code>string</code> <a class="header-anchor" href="#sharedscript-name-string" aria-label="Permalink to &quot;sharedScript.name : &lt;code&gt;string&lt;/code&gt;&quot;">​</a></h4><p>Name of the script (i.e. sanitized relative path)</p><p><strong>Kind</strong>: instance property of <a href="#SharedScript"><code>SharedScript</code></a><br><a name="SharedScript+filename"></a></p><h4 id="sharedscript-filename-string" tabindex="-1">sharedScript.filename : <code>string</code> <a class="header-anchor" href="#sharedscript-filename-string" aria-label="Permalink to &quot;sharedScript.filename : &lt;code&gt;string&lt;/code&gt;&quot;">​</a></h4><p>Filename from which the script is created.</p><p><strong>Kind</strong>: instance property of <a href="#SharedScript"><code>SharedScript</code></a><br><a name="SharedScript+buildError"></a></p><h4 id="sharedscript-builderror-string" tabindex="-1">sharedScript.buildError : <code>string</code> <a class="header-anchor" href="#sharedscript-builderror-string" aria-label="Permalink to &quot;sharedScript.buildError : &lt;code&gt;string&lt;/code&gt;&quot;">​</a></h4><p>Error that may have occured during the transpilation of the script. If no error occured during transpilation, the attribute is set to null.</p><p><strong>Kind</strong>: instance property of <a href="#SharedScript"><code>SharedScript</code></a><br><a name="SharedScript+runtimeError"></a></p><h4 id="sharedscript-runtimeerror-string" tabindex="-1">sharedScript.runtimeError : <code>string</code> <a class="header-anchor" href="#sharedscript-runtimeerror-string" aria-label="Permalink to &quot;sharedScript.runtimeError : &lt;code&gt;string&lt;/code&gt;&quot;">​</a></h4><p>Runtime error that may have occured during the execution of the script. Runtime errors must be reported by the consumer code (cf. reportRuntimeError).</p><p><strong>Kind</strong>: instance property of <a href="#SharedScript"><code>SharedScript</code></a><br><a name="SharedScript+import"></a></p><h4 id="sharedscript-import-⇒-promise" tabindex="-1">sharedScript.import() ⇒ <code>Promise</code> <a class="header-anchor" href="#sharedscript-import-⇒-promise" aria-label="Permalink to &quot;sharedScript.import() ⇒ &lt;code&gt;Promise&lt;/code&gt;&quot;">​</a></h4><p>Dynamically import the bundled module. <a href="https://caniuse.com/?search=import()" target="_blank" rel="noreferrer">https://caniuse.com/?search=import()</a></p><p><strong>Kind</strong>: instance method of <a href="#SharedScript"><code>SharedScript</code></a><br><strong>Returns</strong>: <code>Promise</code> - Promise which fulfills to the JS module.<br><a name="SharedScript+reportRuntimeError"></a></p><h4 id="sharedscript-reportruntimeerror-err" tabindex="-1">sharedScript.reportRuntimeError(err) <a class="header-anchor" href="#sharedscript-reportruntimeerror-err" aria-label="Permalink to &quot;sharedScript.reportRuntimeError(err)&quot;">​</a></h4><p>Manually report an error catched in try / catch block. While there are global &#39;error&#39;, &#39;uncaughtExceptionhandler&#39; that catch errors throws by scripts, this can be usefull in situations where you want your code to continue after the error:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">script.onUpdate(async updates =&gt; {</span></span>
<span class="line"><span style="color:#F8F8F2;">  if (updates.browserBuild) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    if (mod) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      // we want to manually catch error that might be thrown in \`exit()\`</span></span>
<span class="line"><span style="color:#F8F8F2;">      // because otherwise \`mod\`\` would never be updated</span></span>
<span class="line"><span style="color:#F8F8F2;">      try {</span></span>
<span class="line"><span style="color:#F8F8F2;">        mod.exit();</span></span>
<span class="line"><span style="color:#F8F8F2;">      } catch (err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        script.reportRuntimeError(err);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;">    mod = await script.import();</span></span>
<span class="line"><span style="color:#F8F8F2;">    mod.enter();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}, true);</span></span></code></pre></div><p><strong>Kind</strong>: instance method of <a href="#SharedScript"><code>SharedScript</code></a></p><table><thead><tr><th>Param</th><th>Type</th></tr></thead><tbody><tr><td>err</td><td><code>Error</code></td></tr></tbody></table><p><a name="SharedScript+detach"></a></p><h4 id="sharedscript-detach" tabindex="-1">sharedScript.detach() <a class="header-anchor" href="#sharedscript-detach" aria-label="Permalink to &quot;sharedScript.detach()&quot;">​</a></h4><p>Detach the script.</p><p><strong>Kind</strong>: instance method of <a href="#SharedScript"><code>SharedScript</code></a><br><a name="SharedScript+onUpdate"></a></p><h4 id="sharedscript-onupdate-callback-executelistener-⇒-function" tabindex="-1">sharedScript.onUpdate(callback, [executeListener]) ⇒ <code>function</code> <a class="header-anchor" href="#sharedscript-onupdate-callback-executelistener-⇒-function" aria-label="Permalink to &quot;sharedScript.onUpdate(callback, [executeListener]) ⇒ &lt;code&gt;function&lt;/code&gt;&quot;">​</a></h4><p>Register a callback to be executed when the script is updated.</p><p><strong>Kind</strong>: instance method of <a href="#SharedScript"><code>SharedScript</code></a><br><strong>Returns</strong>: <code>function</code> - Function that unregister the callback when executed.</p><table><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>callback</td><td><code>function</code></td><td></td><td>Callback function</td></tr><tr><td>[executeListener]</td><td><code>boolean</code></td><td><code>false</code></td><td>If true, execute the given callback immediately.</td></tr></tbody></table><p><a name="SharedScript+onDetach"></a></p><h4 id="sharedscript-ondetach-callback" tabindex="-1">sharedScript.onDetach(callback) <a class="header-anchor" href="#sharedscript-ondetach-callback" aria-label="Permalink to &quot;sharedScript.onDetach(callback)&quot;">​</a></h4><p>Register a callback to be executed when the script is detached, i.e. when <code>detach</code> as been called, or when the script has been deleted</p><p><strong>Kind</strong>: instance method of <a href="#SharedScript"><code>SharedScript</code></a></p><table><thead><tr><th>Param</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>callback</td><td><code>function</code></td><td>Callback function</td></tr></tbody></table><h2 id="development-notes" tabindex="-1">Development Notes <a class="header-anchor" href="#development-notes" aria-label="Permalink to &quot;Development Notes&quot;">​</a></h2><h2 id="credits" tabindex="-1">Credits <a class="header-anchor" href="#credits" aria-label="Permalink to &quot;Credits&quot;">​</a></h2><p><a href="https://soundworks.dev/credits.html" target="_blank" rel="noreferrer">https://soundworks.dev/credits.html</a></p><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-label="Permalink to &quot;License&quot;">​</a></h2><p><a href="./LICENSE.html">BSD-3-Clause</a></p>`,113),i=[r];function o(l,c,p,d,h,g){return t(),a("div",null,i)}const y=e(n,[["render",o]]);export{F as __pageData,y as default};
