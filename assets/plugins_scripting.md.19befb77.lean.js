import{_ as a,o as s,c as t,O as n}from"./chunks/framework.b2c12034.js";const F=JSON.parse('{"title":"soundworks | plugin scripting","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/scripting.md","filePath":"plugins/scripting.md"}'),r={name:"plugins/scripting.md"};function l(o,e,i,p,c,h){return s(),t("div",null,e[0]||(e[0]=[n(`<h1 id="soundworks-plugin-scripting" tabindex="-1">soundworks | plugin scripting <a class="header-anchor" href="#soundworks-plugin-scripting" aria-label="Permalink to &quot;soundworks | plugin scripting&quot;">​</a></h1><p><a href="https://badge.fury.io/js/@soundworks%2Fplugin-scripting" target="_blank" rel="noreferrer"><img src="https://badge.fury.io/js/@soundworks%2Fplugin-scripting.svg" alt="npm version"></a></p><p><a href="https://soundworks.dev" target="_blank" rel="noreferrer"><code>soundworks</code></a> plugin for runtime distributed scripting.</p><h2 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to &quot;Table of Contents&quot;">​</a></h2><ul><li><a href="#installation">Installation</a></li><li><a href="#usage">Usage</a></li><li><a href="#api">API</a></li><li><a href="#clientpluginscripting">ClientPluginScripting</a></li><li><a href="#serverpluginscripting">ServerPluginScripting</a></li><li><a href="#sharedscript">SharedScript</a></li><li><a href="#development-notes">Development Notes</a></li><li><a href="#credits">Credits</a></li><li><a href="#license">License</a></li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">@soundworks/plugin-scripting</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--save</span></span></code></pre></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><h3 id="server" tabindex="-1">Server <a class="header-anchor" href="#server" aria-label="Permalink to &quot;Server&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// src/server/index.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Server } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/core/server.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> ServerPluginScripting </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/plugin-scripting/server.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> server </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Server</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"><span style="color:#88846F;">// register the plugin with an optional dirname</span></span>
<span class="line"><span style="color:#F8F8F2;">server.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">, ServerPluginScripting, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  dirname: </span><span style="color:#E6DB74;">&#39;my-script&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">// use the plugin once the server is started</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> scripting </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.pluginManager.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><p>Given that there is a file <code>my-constants.js</code> in the watched <code>my-script</code> directory:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// my-script/my-constants.js</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> answer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">;</span></span></code></pre></div><h3 id="client" tabindex="-1">Client <a class="header-anchor" href="#client" aria-label="Permalink to &quot;Client&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// src/client/**/index.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Client } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/core/client.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> ClientPluginScripting </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;@soundworks/plugin-scripting/client.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> client </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Client</span><span style="color:#F8F8F2;">(config);</span></span>
<span class="line"><span style="color:#88846F;">// register the plugin</span></span>
<span class="line"><span style="color:#F8F8F2;">client.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">, ClientPluginScripting);</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">// use the plugin once the client is started</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> scripting </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.pluginManager.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> script </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> scripting.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;my-constants&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mod </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> script.</span><span style="color:#A6E22E;">import</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(mod.answer);</span></span>
<span class="line"><span style="color:#88846F;">// &gt; 42</span></span></code></pre></div><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h3><h4 id="where-do-the-scripts-live" tabindex="-1">Where do the scripts live <a class="header-anchor" href="#where-do-the-scripts-live" aria-label="Permalink to &quot;Where do the scripts live&quot;">​</a></h4><p>The shared scripts are stored in the file system as raw Javascript files located in the directory defined on the server side configuration of the plugin (cf. <code>dirname</code> option).</p><p>This is the responsibility of the code consuming the shared scripts to define the API that the scripts should expose.</p><h4 id="limitations" tabindex="-1">Limitations <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;Limitations&quot;">​</a></h4><p>The scripts are simple JavaScript modules that are re-bundled using <code>esbuild</code> each time their content is modified. As such, they can import installed dependencies (i.e. <code>node_modules</code>) or import other scripts. However, using such bundle leads to a restriction in Node.js clients, that can&#39;t import native addons directly (in such case you should inject the dependency into the script at runtime). This might change in the future as dynamic <code>import</code>/<code>require</code> of ES modules is more stable (cf. <a href="https://github.com/nodejs/help/issues/2751" target="_blank" rel="noreferrer">https://github.com/nodejs/help/issues/2751</a>).</p><h4 id="creating-updating-deleting-scripts" tabindex="-1">Creating / updating / deleting scripts <a class="header-anchor" href="#creating-updating-deleting-scripts" aria-label="Permalink to &quot;Creating / updating / deleting scripts&quot;">​</a></h4><p>Internally the <code>scripting</code> plugin relies on the <a href="https://soundworks.dev/plugins/filesystem.html" target="_blank" rel="noreferrer"><code>@soundworks/plugin-filesystem</code></a> plugin, which should be use to make any modifications in the script directory:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// register and get the scripting plugin</span></span>
<span class="line"><span style="color:#F8F8F2;">server.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">, ServerPluginScripting, { dirname: </span><span style="color:#E6DB74;">&#39;my-script&#39;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> scripting </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.pluginManager.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">// create a new script in the &#39;my-script&#39; directory using the scripting related filesystem</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> code </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">\`export function add(a, b) { return a + b }\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> scripting.filesystem.</span><span style="color:#A6E22E;">writeFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;add.js&#39;</span><span style="color:#F8F8F2;">, code);</span></span></code></pre></div><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="table-of-contents-1" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents-1" aria-label="Permalink to &quot;Table of Contents&quot;">​</a></h3><ul><li><a href="#clientpluginscripting">ClientPluginScripting</a><ul><li><a href="#parameters">Parameters</a></li><li><a href="#examples">Examples</a></li><li><a href="#filesystem">filesystem</a></li><li><a href="#getlist">getList</a></li><li><a href="#getcollection">getCollection</a></li><li><a href="#setglobalscriptingcontext">setGlobalScriptingContext</a></li><li><a href="#attach">attach</a></li></ul></li><li><a href="#serverpluginscripting">ServerPluginScripting</a><ul><li><a href="#examples-1">Examples</a></li><li><a href="#options">options</a></li><li><a href="#filesystem-1">filesystem</a></li><li><a href="#getlist-1">getList</a></li><li><a href="#getcollection-1">getCollection</a></li><li><a href="#setglobalscriptingcontext-1">setGlobalScriptingContext</a></li><li><a href="#onupdate">onUpdate</a></li><li><a href="#switch">switch</a></li><li><a href="#attach-1">attach</a></li></ul></li><li><a href="#sharedscript">SharedScript</a><ul><li><a href="#name">name</a></li><li><a href="#filename">filename</a></li><li><a href="#builderror">buildError</a></li><li><a href="#runtimeerror">runtimeError</a></li><li><a href="#import">import</a></li><li><a href="#reportruntimeerror">reportRuntimeError</a></li><li><a href="#detach">detach</a></li><li><a href="#onupdate-1">onUpdate</a></li><li><a href="#ondetach">onDetach</a></li></ul></li></ul><h2 id="clientpluginscripting" tabindex="-1">ClientPluginScripting <a class="header-anchor" href="#clientpluginscripting" aria-label="Permalink to &quot;ClientPluginScripting&quot;">​</a></h2><p><strong>Extends ClientPlugin</strong></p><p>Client-side representation of the soundworks&#39; scripting plugin.</p><p>The constructor should never be called manually. The plugin will be instantiated automatically when registered in the <code>pluginManager</code></p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>client</code></li><li><code>id</code></li><li><code>options</code> (optional, default <code>{}</code>)</li></ul><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">client.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">, ClientPluginScripting, { dirname });</span></span></code></pre></div><h3 id="filesystem" tabindex="-1">filesystem <a class="header-anchor" href="#filesystem" aria-label="Permalink to &quot;filesystem&quot;">​</a></h3><p>Instance of the underlying filesystem plugin</p><h3 id="getlist" tabindex="-1">getList <a class="header-anchor" href="#getlist" aria-label="Permalink to &quot;getList&quot;">​</a></h3><p>Returns the list of all available scripts.</p><p>Returns <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">Array</a></strong></p><h3 id="getcollection" tabindex="-1">getCollection <a class="header-anchor" href="#getcollection" aria-label="Permalink to &quot;getCollection&quot;">​</a></h3><p>Return the SharedStateCollection of all the scripts underlying share states. Provided for build and error monitoring purposes. Can also be used to maintain a list of existing script, e.g. in a drop-down menu</p><p>If you want a full featured / executable Script instance, use the <code>attach</code> instead.</p><p>Returns <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">Promise</a>&lt;SharedStateCollection&gt;</strong></p><h3 id="setglobalscriptingcontext" tabindex="-1">setGlobalScriptingContext <a class="header-anchor" href="#setglobalscriptingcontext" aria-label="Permalink to &quot;setGlobalScriptingContext&quot;">​</a></h3><p>Registers a global context object to be used in scripts. Note that the context is store globally, so several scripting plugins running in parallel will share the same underlying object. The global <code>getGlobalScriptingContext</code> function will allow to retrieve the given object from within scripts.</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>ctx</code> <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">Object</a></strong> Object to store in global context</li></ul><h3 id="attach" tabindex="-1">attach <a class="header-anchor" href="#attach" aria-label="Permalink to &quot;attach&quot;">​</a></h3><p>Attach to a script.</p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>name</code> <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer">string</a></strong> Name of the script</li></ul><p>Returns <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">Promise</a>&lt;<a href="#sharedscript">SharedScript</a>&gt;</strong> Promise that resolves on a new Script instance.</p><h2 id="serverpluginscripting" tabindex="-1">ServerPluginScripting <a class="header-anchor" href="#serverpluginscripting" aria-label="Permalink to &quot;ServerPluginScripting&quot;">​</a></h2><p><strong>Extends ServerPlugin</strong></p><p>Server-side representation of the soundworks&#39; scripting plugin.</p><p>The constructor should never be called manually. The plugin will be instantiated by soundworks when registered in the <code>pluginManager</code></p><p>Available options:</p><ul><li><code>dirname</code> {String} - directory in which the script files are located</li></ul><p>If no option is given, for example before a user selects a project, the plugin will stay idle until <code>switch</code> is called.</p><p><a href="https://soundworks.dev/plugins/scripting.html" target="_blank" rel="noreferrer">documentation</a></p><h3 id="examples-1" tabindex="-1">Examples <a class="header-anchor" href="#examples-1" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">server.pluginManager.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;scripting&#39;</span><span style="color:#F8F8F2;">, ServerPluginScripting, { dirname });</span></span></code></pre></div><h3 id="options" tabindex="-1">options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;options&quot;">​</a></h3><p>Type: <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">object</a></p><h4 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h4><ul><li><code>dirname</code> <strong>(<a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer">string</a> | null)?</strong> Path to the directory in which the script are located</li><li><code>verbose</code> <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean" target="_blank" rel="noreferrer">boolean</a>?</strong></li></ul><h3 id="filesystem-1" tabindex="-1">filesystem <a class="header-anchor" href="#filesystem-1" aria-label="Permalink to &quot;filesystem&quot;">​</a></h3><p>Instance of the underlying filesystem plugin.</p><h3 id="getlist-1" tabindex="-1">getList <a class="header-anchor" href="#getlist-1" aria-label="Permalink to &quot;getList&quot;">​</a></h3><p>Returns the list of all available scripts.</p><p>Returns <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">Array</a></strong></p><h3 id="getcollection-1" tabindex="-1">getCollection <a class="header-anchor" href="#getcollection-1" aria-label="Permalink to &quot;getCollection&quot;">​</a></h3><p>Return the SharedStateCollection of all the scripts underlying share states. Provided for build and error monitoring purposes. If you want a full featured Script instance, see <code>attach</code> instead.</p><p>Returns <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">Promise</a>&lt;SharedStateCollection&gt;</strong></p><h3 id="setglobalscriptingcontext-1" tabindex="-1">setGlobalScriptingContext <a class="header-anchor" href="#setglobalscriptingcontext-1" aria-label="Permalink to &quot;setGlobalScriptingContext&quot;">​</a></h3><p>Registers a global context object to be used in scripts. Note that the context is store globally, so several scripting plugins running in parallel will share the same underlying object. The global <code>getGlobalScriptingContext</code> function will allow to retrieve the given object from within scripts.</p><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>ctx</code> <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">Object</a></strong> Object to store in global context</li></ul><h3 id="onupdate" tabindex="-1">onUpdate <a class="header-anchor" href="#onupdate" aria-label="Permalink to &quot;onUpdate&quot;">​</a></h3><p>Register callback to execute when a script is created or deleted.</p><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>callback</code> <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="noreferrer">Function</a></strong> Callback function to execute</li><li><code>executeListener</code> <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean" target="_blank" rel="noreferrer">boolean</a></strong> If true, execute the given callback immediately. (optional, default <code>false</code>)</li></ul><p>Returns <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="noreferrer">Function</a></strong> Function that unregister the listener when executed.</p><h3 id="switch" tabindex="-1">switch <a class="header-anchor" href="#switch" aria-label="Permalink to &quot;switch&quot;">​</a></h3><p>Switch the plugin to watch and use another directory</p><h4 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>dirname</code> <strong>(<a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer">String</a> | <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object" target="_blank" rel="noreferrer">Object</a>)</strong> Path to the new directory. As a convenience to match the plugin filesystem API, an object containing the &#39;dirname&#39; key can also be passed</li></ul><h3 id="attach-1" tabindex="-1">attach <a class="header-anchor" href="#attach-1" aria-label="Permalink to &quot;attach&quot;">​</a></h3><p>Attach to a script.</p><h4 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>name</code> <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer">string</a></strong> Name of the script</li></ul><p>Returns <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">Promise</a>&lt;<a href="#sharedscript">SharedScript</a>&gt;</strong> Promise that resolves on a new Script instance.</p><h2 id="sharedscript" tabindex="-1">SharedScript <a class="header-anchor" href="#sharedscript" aria-label="Permalink to &quot;SharedScript&quot;">​</a></h2><p>A SharedScript can be distributed amongst different clients and modified at runtime.</p><p>The script source is stored directly in the filesystem, see <code>dirname</code> option of the server-side plugin.</p><p>A Shared script cannot be instantiated manually, it is retrieved by calling the <code>ClientPluginScripting#attach</code> or <code>ServerPluginScripting#attach</code> methods.</p><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h3><p>Name of the script (i.e. sanitized relative path)</p><p>Type: <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer">string</a></p><h3 id="filename" tabindex="-1">filename <a class="header-anchor" href="#filename" aria-label="Permalink to &quot;filename&quot;">​</a></h3><p>Filename from which the script is created.</p><p>Type: <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer">string</a></p><h3 id="builderror" tabindex="-1">buildError <a class="header-anchor" href="#builderror" aria-label="Permalink to &quot;buildError&quot;">​</a></h3><p>Error that may have occurred during the transpilation of the script. If no error occurred during transpilation, the attribute is set to null.</p><p>Type: <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer">string</a></p><h3 id="runtimeerror" tabindex="-1">runtimeError <a class="header-anchor" href="#runtimeerror" aria-label="Permalink to &quot;runtimeError&quot;">​</a></h3><p>Runtime error that may have occurred during the execution of the script. Runtime errors must be reported by the consumer code (cf. reportRuntimeError).</p><p>Type: <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer">string</a></p><h3 id="import" tabindex="-1">import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;import&quot;">​</a></h3><p>Dynamically import the bundled module.</p><p>Returns <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">Promise</a>&lt;<a href="https://nodejs.org/api/modules.html" target="_blank" rel="noreferrer">Module</a>&gt;</strong> Promise which fulfills to the JS module.</p><h3 id="reportruntimeerror" tabindex="-1">reportRuntimeError <a class="header-anchor" href="#reportruntimeerror" aria-label="Permalink to &quot;reportRuntimeError&quot;">​</a></h3><p>Manually report an error catched in try / catch block.</p><p>This can be useful in situations where you want your script to expose a specific API:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { expectedMethod } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> script.</span><span style="color:#A6E22E;">import</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">expectedMethod) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> err </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Invalid script &quot;\${script.name}&quot;: should export a &quot;expectedMethod&quot; function&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  script.</span><span style="color:#A6E22E;">reportRuntimeError</span><span style="color:#F8F8F2;">(err);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>Or when you want your code to continue after the script error, e.g.:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">script.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">updates</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (updates.browserBuild) {</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (mod) {</span></span>
<span class="line"><span style="color:#F8F8F2;">     </span><span style="color:#88846F;">// we want to manually catch error that might be thrown in \`exit()\`</span></span>
<span class="line"><span style="color:#F8F8F2;">     </span><span style="color:#88846F;">// because otherwise \`mod\`\` would never be updated</span></span>
<span class="line"><span style="color:#F8F8F2;">     </span><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">       mod.</span><span style="color:#A6E22E;">exit</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">     } </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">       script.</span><span style="color:#A6E22E;">reportRuntimeError</span><span style="color:#F8F8F2;">(err);</span></span>
<span class="line"><span style="color:#F8F8F2;">     }</span></span>
<span class="line"><span style="color:#F8F8F2;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">   mod </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> script.</span><span style="color:#A6E22E;">import</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">   mod.</span><span style="color:#A6E22E;">enter</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><h4 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>err</code> <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noreferrer">Error</a></strong></li></ul><h3 id="detach" tabindex="-1">detach <a class="header-anchor" href="#detach" aria-label="Permalink to &quot;detach&quot;">​</a></h3><p>Detach the script.</p><h3 id="onupdate-1" tabindex="-1">onUpdate <a class="header-anchor" href="#onupdate-1" aria-label="Permalink to &quot;onUpdate&quot;">​</a></h3><p>Register a callback to be executed when the script is updated.</p><h4 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>callback</code> <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="noreferrer">Function</a></strong> Callback function</li><li><code>executeListener</code> <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean" target="_blank" rel="noreferrer">boolean</a></strong> If true, execute the given callback immediately. (optional, default <code>false</code>)</li></ul><p>Returns <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="noreferrer">Function</a></strong> Function that unregister the callback when executed.</p><h3 id="ondetach" tabindex="-1">onDetach <a class="header-anchor" href="#ondetach" aria-label="Permalink to &quot;onDetach&quot;">​</a></h3><p>Register a callback to be executed when the script is detached, i.e. when <code>detach</code> as been called, or when the script has been deleted</p><h4 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>callback</code> <strong><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="noreferrer">Function</a></strong> Callback function</li></ul><h2 id="development-notes" tabindex="-1">Development Notes <a class="header-anchor" href="#development-notes" aria-label="Permalink to &quot;Development Notes&quot;">​</a></h2><h2 id="credits" tabindex="-1">Credits <a class="header-anchor" href="#credits" aria-label="Permalink to &quot;Credits&quot;">​</a></h2><p><a href="https://soundworks.dev/credits.html" target="_blank" rel="noreferrer">https://soundworks.dev/credits.html</a></p><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-label="Permalink to &quot;License&quot;">​</a></h2><p><a href="./LICENSE.html">BSD-3-Clause</a></p>`,135)]))}const u=a(r,[["render",l]]);export{F as __pageData,u as default};
