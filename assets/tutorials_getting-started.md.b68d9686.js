import{_ as s,o as e,c as a,V as n}from"./chunks/framework.7cbf217e.js";const o="/assets/soundworks-create-min.2e2aae2b.gif",t="/assets/wizard-create-project.251a088b.png",l="/assets/wizard-init-install-deps.0dd1ef9e.png",p="/assets/wizard-create-player-1.e01591e6.png",r="/assets/wizard-create-player-2.4aa47840.png",c="/assets/wizard-create-player-3.0d49b1fe.png",i="/assets/wizard-create-player-confirm.30e4d539.png",d="/assets/wizard-init-end.bb661fd2.png",F="/assets/server-launched.b266e27d.png",h="/assets/browser-console.dea4a8d1.png",y="/assets/browser-console-2.d4f7a1b4.png",u="/assets/emulated-clients.2df378a3.png",j=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/getting-started.md","filePath":"tutorials/getting-started.md"}'),g={name:"tutorials/getting-started.md"},m=n('<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><p>In this tutorial, you will learn how to setup a simple <em>soundworks</em> application where any connected user will be able to trigger a flash on the screen of all connected clients.</p><p>The tutorial requires basic knowledge of <em>JavaScript</em>, <em>Node.js</em> and of the command-line. If you are just starting with <em>JavaScript</em> development, please first set up a working environment following the instructions <a href="/misc/setting-up-environment.html">here</a> and come back when done.</p><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h3><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer">Node.js 16+</a></li><li>A modern browser (e.g. Chrome, Firefox)</li></ul><h2 id="step-1-setting-things-up" tabindex="-1">Step 1 - Setting things up <a class="header-anchor" href="#step-1-setting-things-up" aria-label="Permalink to &quot;Step 1 - Setting things up&quot;">​</a></h2><p>The best and most simple way to create a new <em>soundworks</em> application is to use the dedicated command line tools:</p><p><img src="'+o+`" alt="soundworks/create"></p><p>So first thing first, open a Terminal, go to some directory and execute the following command:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">path/to/working/dir</span></span>
<span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">@soundworks/create@latest</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you run the command for the first time (which is quite likely), the <code>npx</code> command will tell you that it needs to install the <code>@soundworks/create</code> package, just press <code>Enter</code> to accept and continue.</p></div><p>The wizard will startup and ask you for the name of the directory in which you want create the application: just write <code>getting-started</code> and press <code>Enter</code>. The wizard will automatically create the directory, copy some files and install the required dependencies as illustrated in the screenshot below.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note that the screenshots in this guide may differ slightly from what you actually see in your console, as the CLI tool might have evolved a bit since the screenshots have been made.</p></div><p><img src="`+t+'" alt="create-project"></p><p>Once the installation is done, the <code>@soundworks/create</code> wizard will propose you to install some <em>soundworks</em> plugins and some curated libraries. For now, just press <code>Enter</code> to skip this steps.</p><p><img src="'+l+'" alt="init-install-deps"></p><p>After that step, the wizard will propose you to create a client of your application. Let&#39;s call it <code>player</code> and press <code>Enter</code> as show below.</p><p><img src="'+p+'" alt="create-player-1"></p><p>The wizard will then ask a few questions to configure your client, again just press <code>Enter</code> to select the default values (i.e. type: <code>browser</code> and template: <code>default</code>):</p><p><img src="'+r+'" alt="create-player-2"></p><p><img src="'+c+'" alt="create-player-3"></p><p>Finally, the wizard will ask you to confirm your choices, press <code>Enter</code>.</p><p><img src="'+i+'" alt="create-player-confirm"></p><p>The wizard will copy some files and configure the application for you. Your application is ready to be launched.</p><p>To make sure the application is correctly set up and installed, just follow the steps 1 and 3 proposed as next steps by the wizard.</p><p><img src="'+d+'" alt="init-end"></p><p>After a few seconds, your server should be running:</p><p><img src="'+F+`" alt="server-launched"></p><p>Open you favorite browser (which shall probably not be Safari), go to <a href="http://127.0.0.1:8000" target="_blank" rel="noreferrer">http://127.0.0.1:8000</a>, and tada! You should see a rather pretty black screen!</p><p>Congrats! You just configured and ran your first soundworks application. Now, let&#39;s have a closer look to the codebase.</p><h2 id="step-2-exploring-the-file-structure-of-the-application" tabindex="-1">Step 2 - Exploring the file structure of the application <a class="header-anchor" href="#step-2-exploring-the-file-structure-of-the-application" aria-label="Permalink to &quot;Step 2 - Exploring the file structure of the application&quot;">​</a></h2><p>Press <code>Ctrl + C</code> to stop the server and open the <code>getting-started</code> directory in your favorite text editor. You should see the following file structure:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">getting-started</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">.build</span><span style="color:#F8F8F2;">              </span><span style="color:#88846F;"># Directory where your application is built</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">config</span><span style="color:#F8F8F2;">              </span><span style="color:#88846F;"># Configuration files</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">env</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">└──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">application.json</span><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">node_modules</span><span style="color:#F8F8F2;">        </span><span style="color:#88846F;"># Directory where all dependencies are installed</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">public</span><span style="color:#F8F8F2;">              </span><span style="color:#88846F;"># Directory that is exposed by the server</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">src</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">clients</span><span style="color:#F8F8F2;">         </span><span style="color:#88846F;"># Directory where all clients are declared</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">components</span><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">player</span><span style="color:#F8F8F2;">      </span><span style="color:#88846F;"># Source code of the \`player\` client you just created</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">server</span><span style="color:#F8F8F2;">          </span><span style="color:#88846F;"># Source code of the server</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">└──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">utils</span><span style="color:#F8F8F2;">   </span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">package.json</span><span style="color:#F8F8F2;">        </span><span style="color:#88846F;"># File that contains the declaration of your dependencies</span></span>
<span class="line"><span style="color:#A6E22E;">└──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">README.md</span><span style="color:#F8F8F2;">           </span><span style="color:#88846F;"># General infos about your application</span></span></code></pre></div><ul><li>The <code>node_modules</code> and <code>.build</code> directories should <strong><em>never</em></strong> be edited manually. They are used by the Node Package Manager (i.e. <code>npm</code>) and the <em>soundworks</em> build tools to install dependencies and bundle your application.</li><li>The <code>src</code> directory at contrary contains all the source files of your application, this is where you will work most of the time.</li><li>The <code>public</code> directory is the directory that is exposed to the network by the server. This is the place where you should put your static assets such as images or soundfiles that the clients of your application will download and use.</li></ul><p>:::warn It is <strong><em>very</em></strong> important to understand that exposing a directory to the network means that all files located in this directory will be accessible by **<em>any</em>**computer connected to the same network.<br><strong><em>So, be careful to not expose sensitive or private informations there.</em></strong>. This is an important thing to keep in mind whenever you deal with servers and networks, it&#39;s not specific to soundworks applications. :::</p><p>Now that we have an overview of the file structure of a <em>soundworks</em> application, let&#39;s write some code!</p><h2 id="step-3-create-a-global-shared-state" tabindex="-1">Step 3 - Create a global shared state <a class="header-anchor" href="#step-3-create-a-global-shared-state" aria-label="Permalink to &quot;Step 3 - Create a global shared state&quot;">​</a></h2><p>First, go back to the Terminal and restart the server:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">run</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">dev</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>dev</code> command (quite wisely) starts the server in development mode. This means the application will be bundled and the server restarted each time a source file is saved (which is expected to be confortable and time saving when developping an application).</p></div><p>Open the <code>src/server/index.js</code> file and add the following lines at the end of the file:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/server/index.js</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// and do your own stuff!</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globalSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  trigger: { type: </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">, event: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">};</span></span></code></pre></div><p>Here, we just create a plain old JavaScript object that follows the <em>soundworks</em> schema definition (if you are familiar with databases, you can think of it as the schema of a table). The full API documentation for a schema is accessible <a href="https://soundworks.dev/soundworks/server.StateManager#~schema" target="_blank" rel="noreferrer">here</a> but for now, it&#39;s ok to just understand that we declared some data structure a parameter named <code>trigger</code> that is configured to be a <code>boolean</code> event.</p><p>Then we will need to register this schema into the <em>soundworks</em>&#39; state manager:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globalsSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  trigger: { type: </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">, event: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F8F8F2;">server.stateManager.</span><span style="color:#A6E22E;">registerSchema</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">, globalsSchema);</span></span></code></pre></div><p>Finally, we will create an global shared state instance from this schema definition:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globalsSchema </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  trigger: { type: </span><span style="color:#E6DB74;">&#39;boolean&#39;</span><span style="color:#F8F8F2;">, event: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">server.stateManager.</span><span style="color:#A6E22E;">registerSchema</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">, globalsSchema);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globals </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> server.stateManager.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><p>And that&#39;s it for the server-side logic! If everything went well, you should see no error in the Terminal, and launching a <a href="http://120.0.0.1:8000" target="_blank" rel="noreferrer">client</a> should still show you the same fancy black page.</p><h2 id="step-4-make-clients-interactive" tabindex="-1">Step 4 - Make clients interactive <a class="header-anchor" href="#step-4-make-clients-interactive" aria-label="Permalink to &quot;Step 4 - Make clients interactive&quot;">​</a></h2><p>Now that the server-side logic is ready, let&#39;s implement the client-side of our simple application.</p><p>Open a browser and go to <a href="http://127.0.0.1:8000" target="_blank" rel="noreferrer">http://127.0.0.1:8000</a>, then go back to your text editor and open the <code>src/clients/player/index.js</code> file.</p><p>Let&#39;s first add a line of code to display some text on the page to make sure we can act on this fancy black screen:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#88846F;">// src/clients/player/index.js</span></span>
<span class="line diff remove"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> $layout </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createLayout</span><span style="color:#F8F8F2;">(client, $container); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">$container.innerHTML </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">\`&lt;h1 style=&quot;padding:20px;&quot;&gt;Click here!&lt;/h1&gt;\`</span><span style="color:#F8F8F2;">; </span></span></code></pre></div><p>Here, we programmatically modify the HTML of our document directly from the JavaScript code.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>$container</code> variable we use in this snippet refers to an HTML element in which our client interface should be displayed.</p><p>The <code>$layout</code> we just removed is just a convenience object proposed by the template as a starting point for building interfaces. It is based on the <a href="https://lit.dev/" target="_blank" rel="noreferrer">lit</a> library developped by <em>Google</em> and its source code is located in <code>src/clients/player/views/layout.js</code>. As shown in this simple example <em>soundworks</em> does not require the usage of this abstraction, nor of the <code>lit</code> library.</p></div><p>If you reload the page (<code>Cmd + Shift + R</code>), you should see the text &quot;click here&quot; displayed of the top left of your screen, so we are ensured we got some control over this Web page.</p><p>Now, let&#39;s go back to our client-side logic and add the following code in the same file:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// src/clients/player/index.js</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globals </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals shared state&#39;</span><span style="color:#F8F8F2;">, globals.</span><span style="color:#A6E22E;">getValues</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">$container.innerHTML </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">\`&lt;h1 style=&quot;padding:20px;&quot;&gt;Click here!&lt;/h1&gt;\`</span><span style="color:#F8F8F2;">;</span></span></code></pre></div><p>Here, we simply attach our client to the <code>globals</code> state created by the server. This means that our client will be able to make some updates to the shared state, as well as being notified when a change is made to the shared state.</p><p>The second line will just log the current values of the <code>globals</code> shared state into the browser&#39;s console, so that we can check that the shared state has been successfully attached.</p><p><img src="`+h+`" alt="browser-console"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To open the <em>JavaScript</em> console in your browser, you can press <code>Cmd + Alt + J</code> in <em>Chrome</em> or alternatively <code>Cmd + Alt + I</code> in <em>Firefox</em>, then select the <code>Console</code> tab.</p></div><p>Then, let&#39;s write the code that allows us to react to any change made on the shared state:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globals </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F8F8F2;">globals.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">updates</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(updates);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">$container.innerHTML </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">\`&lt;h1 style=&quot;padding:20px;&quot;&gt;Click here!&lt;/h1&gt;\`</span><span style="color:#F8F8F2;">;</span></span></code></pre></div><p>In this snippet, we use the <code>onUpdate</code> method of the <code>globals</code> shared state that allows us to trigger a function (the callback function will just log the updates for now, but we will come back here later).</p><p>At this point, we have the logic we need to react to any <code>globals</code> shared state change, but nothing to actually trigger a change. Let&#39;s add the following code to update the value of the <code>trigger</code> parameter when the user clicks on the screen:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#F8F8F2;">$container.innerHTML </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">\`&lt;h1 style=&quot;padding:20px;&quot;&gt;Click here!&lt;/h1&gt;\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F8F8F2;">$container.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  globals.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">({ trigger: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">});</span></span></code></pre></div><p>Reload the page again (<code>Cmd + Shift + R</code>), and now whenever you click on the screen you should see a new log in the console.</p><p><img src="`+y+`" alt="browser-console-2"></p><p>Finally, we just need to review the code inside the <code>onUpdate</code> callback to make the screen blink instead of just logging the shared state updates into the console.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> globals </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> client.stateManager.</span><span style="color:#A6E22E;">attach</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;globals&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">globals.</span><span style="color:#A6E22E;">onUpdate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">updates</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (updates.trigger </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    $container.style.backgroundColor </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;white&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">      $container.style.backgroundColor </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;black&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    }, </span><span style="color:#AE81FF;">50</span><span style="color:#F8F8F2;">);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre></div><p>Here, whenever the <code>trigger</code> parameter of the <code>globals</code> shared state is set to <code>true</code>, we pass the background of the screen to <code>&#39;white&#39;</code> and put it back to <code>&#39;black&#39;</code> after 50ms.</p><p>To see the shared state in action (and understand more precisely why we keep calling it a &quot;<em>shared state</em>&quot;), let&#39;s emulate several parallel clients in our browser window. To that end, open <a href="http://127.0.0.1:8000?emulate=8" target="_blank" rel="noreferrer">http://127.0.0.1:8000?emulate=8</a> (note the <code>?emulate=8</code> at the end of the URL).</p><p><img src="`+u+'" alt="emulated-clients"></p><p>If you click on any of these 8 emulated clients all of them will blink, as they are all attached to the same <code>globals</code> shared state, and thus react in the same way to the updates of the state.</p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>Congrats, you just wrote your first <em>soundworks</em> application. Along the way you learned quite a few things:</p><ul><li><ol><li>How to setup a <em>soundworks</em> application using the <code>@soundworks/create</code> wizard,</li></ol></li><li><ol start="2"><li>How to use some of the tools that are at your end to simplify the development, and</li></ol></li><li><ol start="3"><li>Discovered the shared states that are one of the most versatile abstraction provided by <em>soundworks</em> to simplify development and hide some network complexity.</li></ol></li></ul><p>On the next tutorial, we will explore the possibilities offered by the distributed staet management system porposed by <em>soundworks</em>.</p>',79),f=[m];function b(w,E,k,v,D,_){return e(),a("div",null,f)}const C=s(g,[["render",b]]);export{j as __pageData,C as default};
